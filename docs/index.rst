.. AndroidMalwareCrypto documentation master file, created by
   sphinx-quickstart on Thu Aug 12 11:31:14 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to AndroidMalwareCrypto's documentation!
================================================

This tool allows for an analysis of cryptographic API in Android applications. The tool was especially developed to compare cryptographic API usage in benign vs. malicious applications and contains (weak) malware classifier based purely on cryptographic API features. We strive to provide end-to-end solution, automating all steps in the analysis.

This documentation serves as a protocol to allow full replication of our experiments. Use the links in the list above (or table of contents) to navigate to specific step in our research.

Quickstart
=======

To run full-fledged analysis on your own dataset, read below. The following script just pulls the docker image and runs sample experiment on small number of APKs.

1. Run docker image interactively

------
.. code-block:: bash

    docker pull adamjanovsky/cryptomlw \
    && docker run -it adamjanovsky/cryptomlw

2. Run the sample experiment script

------
.. code-block:: bash

    cd AndroidMalwareCrypto/sample_experiment \
    & ./execute_sample_experiment.sh


Run full analysis
=================

The full analysis has 5 steps, each of which has its own CLI. Please, visit the docs for the instructions for the correspndings steps.

1. Decompilation of APKs, collection of cryptographic API usage in the decompiled binaries (:doc:`mining_crypto_api`, :doc:`apk_datasets`) handled with :samp:`cli_process.py`.
2. Data preparation: (:doc:`data_preparation`) handled with :samp:`cli_prepare.py`.
3. Exploratory data analysis of crypto API in your dataset (:doc:`exploratory_data_analysis`) handled with :samp:`cli_automatically_explore.py`.
4. Training and evaluation of malware classifier based on crypto API features (:doc:`classifier_training`) handled with :samp:`cli_train.py`.
5. Explanations of the classifier using `SHAP <https://github.com/slundberg/shap>`_ (:doc:`classifier_interpretation`) handled with :samp:`cli_explain.py`.

Contents
========

.. toctree::
   :maxdepth: 2

   installation.md
   mining_crypto_api.md
   data_preparation.md
   exploratory_data_analysis.md
   classifier_training.md
   classifier_interpretation.md
   classifier_evaluation.md
   apk_datasets.md

