import random
import csv
import requests
import logging
from multiprocessing import Pool
import os
import random
import argparse
from tqdm import tqdm

"""
This script serves for downloading files from AndroZoo. Note that API key must be specified as a command line parameter.
Other stuff is to be set directly in the tool, see parameters in the main function.
"""


def is_in_timespan(actual, start, stop):
    return start <= actual <= stop


def shuffle_csv(clean_csv_path, shuffled_csv_path):
    with open(clean_csv_path, 'r') as handle:
        data = handle.readlines()
        header, rest = data[0], data[1:]
    random.shuffle(rest)
    with open(shuffled_csv_path, 'w') as handle:
        handle.write(header)
        for line in rest:
            handle.write(line)


def filter_androzoo_dataset(to_sample,csv_path, vt_scan_date_start, vt_scan_date_end, vt_treshold, max_size):
    samples_of_interest = []
    logging.info('Preparing subset of samples to download.')

    with open(csv_path, 'r') as csv_handle:
        reader = csv.DictReader(csv_handle)
        sampled = 0

        for row in reader:
            if row['vt_detection'] != '':
                virus_total = int(row['vt_detection'])
            else:
                virus_total = 0
            vt_scan_year = row['vt_scan_date'].split('-')[0]
            if vt_scan_year != '':
                vt_scan_year = int(vt_scan_year)
            else:
                vt_scan_year = 0

            file_size = int(row['apk_size'])

            if virus_total >= vt_treshold and is_in_timespan(vt_scan_year, vt_scan_date_start, vt_scan_date_end) and file_size < max_size:
                samples_of_interest.append(row)
                sampled += 1

            if sampled >= to_sample:
                return samples_of_interest

    logging.info('Not enough samples in the original dataset.')
    return samples_of_interest


def get_url(sha256, api_key):
    return 'https://androzoo.uni.lu/api/download?apikey=' + api_key + '&sha256=' + sha256


def download_apk(sha256, filepath, api_key):
    url = get_url(sha256, api_key)
    response = requests.get(url)

    code = response.status_code
    if code != 200:
        logging.info(f'Code for {sha256} is {code}')
        return

    with open(filepath, 'wb') as handle:
        handle.write(response.content)


def concurrent_downloader(list_of_files, outpath, n_threads, api_key):
    logging.info(f'Downloading samples with {n_threads} threads')
    process_pool = Pool(n_threads)

    datapath = os.path.join(outpath, 'data')
    if not os.path.exists(datapath):
        os.mkdir(datapath)

    for file in list_of_files:
        filepath = os.path.join(datapath, file['sha256'] + '.apk')
        process_pool.apply_async(download_apk, (file['sha256'], filepath, api_key,))

    process_pool.close()
    process_pool.join()


def main(api_key):
    csv_path = '/path/to/csv'
    outpath = '/output/path/'  # where to store the dataset
    n_threads = 4  # how many concurrent downloads to use
    n_samples = 20000  # how many samples to download

    start_year = 2018
    end_year = 2019  # only samples in the interval <start_year, end_year> will be downloaded
    minimal_vt_scan_positives = 5  # how many AV in virus total must have been triggered
    maximal_size_in_bytes = 20000000  # 20 MB maximal size of apk to download

    to_shuffle = False  # Whether the original csv should also be shuffled or not. We recommend shuffling once and keeping the shuffled version. Only then it's possible to sample uniformly.

    logging.basicConfig(filename=os.path.join(outpath, 'log.txt'), level=logging.INFO)

    if to_shuffle is True:
        csv_shuffled_path = os.path.join(os.path.dirname(csv_path), 'androzoo_shuffled.csv')
        logging.info(f'Shuffling dataset into path: {csv_shuffled_path}')
        shuffle_csv(csv_path, csv_shuffled_path)
    else:
        csv_shuffled_path = csv_path

    dset_sample = filter_androzoo_dataset(n_samples, csv_shuffled_path,
                                            start_year, end_year, minimal_vt_scan_positives, maximal_size_in_bytes)
    print(len(dset_sample))
    concurrent_downloader(dset_sample, outpath, n_threads, api_key)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Androzoo downloader.')
    parser.add_argument('api_key', type=str, help='Androzoo API key')
    args = parser.parse_args()
    main(args.api_key)
