tasks: # What tasks to perform: 'download', 'decompile', 'third_party_libs', 'evaluate'
  - 'decompile'
is_being_logged: False # whether to log into Neptune.ai or not
n_threads: 8 # how many threads to use
neptune_project_name: 'CRoCS/CryptoMalware' # Name of project in the Neptune.ai
experiment_name: 'Decompile debugging' # Name of experiment for the Neptune.ai
dataset_path: '/path/to/your/dataset/root/directory/' # path to your dataset
timeout: 900 # How many seconds to try processing a single sample before aborting. 

download:
  csv_path: '/path/to/androzoo/csv/file/with/shuffled/rows/androzoo_shuffled.csv' # Path to the Androzoo csv file
  n_samples: 11 # How many samples to download
  start_year: 2013 # Which year to start with, eg. only samples 2013 and later will be downloaded
  end_year: 2019 # Which year to stop at, e.g. only samples from 2013-2019 will be downloaded
  max_size: 20000000 # Maximal size of the apk in bytes, this is 20MB
  strategy: 'uniform' # Keep uniform here. It tells you how to sample the apks from the years. In this case, you get 11 samples evenly distributed from the years 2013-2019
  minimal_vt_positives: 5 # How many Virus total positive scores the files should have
  delete_apks: False # If we should delete the APK after the experiment or not
  
decompile:
  delete_dxs: False # If we should delete the DX files after experiment or not.
  jadx_path: 'jadx' # Specify the full path to your jadx binary decompiler

evaluate:
  java_libs_to_search: # list of strings that indicate presence of java 3rd party crypto library
      - "bouncycastle"
      - "spongycastle"
      - "libsodium"
  strings_to_search: # Basically just a list of strings for which we should search in the decompiled apk.
    - "Cipher"
    - 'SecretKeySpec'
    - 'SecretKey'
    - 'Cipher.getInstance('
    - 'cryptoCipherInputStream'
    - 'KeyAgreement'
    - 'KeyGenerator'
    - 'Mac'
    - 'NullCipher'
    - 'RSAPublicKey'
    - 'PrivateKey'
    - 'MessageDigest'
    - 'SecureRandom'
    - 'KeyPair'
    - 'SHA-256'
    - '"SHA-1' 
    - '"MD5'
    - '"SHA1PRNG'
    - 'AES/CBC/NoPadding'
    - 'AES/CBC/PKCS5Padding'
    - 'AES/ECB/NoPadding'
    - 'AES/ECB/PKCS5Padding'
    - 'DES/CBC/NoPadding'
    - 'DES/CBC/PKCS5Padding'
    - 'DES/ECB/NoPadding'
    - 'DES/ECB/PKCS5Padding'
    - 'DESede/CBC/NoPadding'
    - 'DESede/CBC/PKCS5Padding'
    - 'DESede/ECB/NoPadding'
    - 'DESede/ECB/PKCS5Padding'
    - 'RSA/ECB/PKCS1Padding'
    - 'RSA/ECB/OAEPWithSHA-1AndMGF1Padding'
    - 'RSA/ECB/OAEPWithSHA-256AndMGF1Padding'
    - 'ECDHCurve25519'
    - 'EncryptedFile'
    - 'MasterKeys'
    - 'SHA-384'
    - 'SHA-512'
    - 'SHA-224'
    - 'ISO10126Padding'
    - 'NoPadding'
    - 'PKCS5Padding'
    - 'OAEPPadding'
    - 'OAEPwithSHA-1andMGF1Padding'
    - 'OAEPwithSHA-256andMGF1Padding'
    - 'OAEPwithSHA-224andMGF1Padding'
    - 'OAEPwithSHA-384andMGF1Padding'
    - 'OAEPwithSHA-512andMGF1Padding'
    - 'KeyPairGenerator'
    - 'SecretKeyFactory'
    - 'DESMAC'
    - 'DESMAC/CFB8'
    - 'DESedeMAC'
    - 'DESedeMAC/CFB8'
    - 'DESedeMAC64'
    - 'DESwithISO9797'
    - 'HmacMD5'
    - 'HmacSHA1'
    - 'HmacSHA224'
    - 'HmacSHA256'
    - 'HmacSHA384'
    - 'HmacSHA512'
    - 'ISO9797ALG3MAC'
    - 'PBEwithHmacSHA'
    - 'PBEwithHmacSHA1'
    - 'PBEwithHmacSHA224'
    - 'PBEwithHmacSHA256'
    - 'PBEwithHmacSHA384'
    - 'PBEwithHmacSHA512'
    - 'DSA'
    - 'DSAwithSHA1'
    - 'DSS'
    - 'ECDSA'
    - 'ECDSAwithSHA1'
    - 'MD2withRSA'
    - 'MD4withRSA'
    - 'MD5withRSA'
    - 'MD5withRSA/ISO9796-2'
    - 'NONEwithDSA'
    - 'NONEwithECDSA'
    - 'NONEwithRSA'
    - 'RSASSA-PSS'
    - 'SHA1withDSA'
    - 'SHA1withECDSA'
    - 'SHA1withRSA'
    - 'SHA1withRSA/ISO9796-2'
    - 'SHA1withRSA/PSS'
    - 'SHA224withDSA'
    - 'SHA224withECDSA'
    - 'SHA224withRSA'
    - 'SHA224withRSA/PSS'
    - 'SHA256withDSA'
    - 'SHA256withECDSA'
    - 'SHA256withRSA'
    - 'SHA256withRSA/PSS'
    - 'SHA384withECDSA'
    - 'SHA384withRSA'
    - 'SHA384withRSA/PSS'
    - 'SHA512withECDSA'
    - 'SHA512withRSA'
    - 'SHA512withRSA/PSS'
