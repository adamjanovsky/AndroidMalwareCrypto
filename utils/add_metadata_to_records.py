import pandas as pd
import argparse
import json



def main() -> None:

    parser = argparse.ArgumentParser("Add metadata to records.jsons from .xlsx file.")
    parser.add_argument(
        "input_json_path",
        metavar="INPUT_JSON_PATH",
        type=str,
        help="path to input json"
    )
    parser.add_argument(
        "input_xlsx_path",
        metavar="INPUT_XLSX_PATH",
        type=str,
        help="path to input metadata xlsx file"
    )
    parser.add_argument(
        "--xlsx_sheet_name",
        metavar="--XLSX_SHEET_NAME",
        type=str,
        help="name of xlsx sheet (most likely `malware` or `clean`)"
    )
    parser.add_argument(
        "output_json_path",
        metavar="OUTPUT_JSON_PATH",
        type=str,
        help="path to output json"
    )
    
    
    args = parser.parse_args()
    df_metadata = pd.read_excel(args.input_xlsx_path, index_col=0, sheet_name=args.xlsx_sheet_name)

    with open(args.input_json_path) as handle:
        records = json.load(handle)
    
    for hash_key in records.keys():
        row = df_metadata.loc[hash_key.upper(),:]
        value_dict = records[hash_key]
        if "year_month" in df_metadata.columns:
            value_dict["metadata_dex_year"] = row["year_month"][:4]
        else:
            value_dict["metadata_dex_year"] = None
            print("year not found")
        if "detections" in df_metadata.columns:
            value_dict["metadata_detections"] = row["detections"]
        else:
            value_dict["metadata_detections"] = None
            print("detections not found")
        records[hash_key] = value_dict # just in case
    
    with open(args.output_json_path, "w") as handle:
        json.dump(records, handle)
    
if __name__ == "__main__":

    main()