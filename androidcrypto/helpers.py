import csv
import itertools
import re
import hashlib
from androidcrypto import constants
import base64
import random
import logging

def decolorize_source_code(src_code):
    reaesc = re.compile(r'\x1b[^m]*m')
    return reaesc.sub('', src_code)


def flatten_list(lst):
    return [item for sublist in lst for item in sublist]


def hash_file(path):
    hasher = hashlib.sha256()
    with open(path, 'rb') as afile:
        buf = afile.read(constants.BLOCKSIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = afile.read(constants.BLOCKSIZE)
    return hasher.hexdigest()


def decode_base64_line_of_code(line_of_code):
    splt = line_of_code.split('Base64.decode("')
    if len(splt) > 1:
        return base64.decodebytes(str.encode(splt[1].split('\"')[0]))
    else:
        return None


def shuffle_csv(clean_csv_path, shuffled_csv_path):
    with open(clean_csv_path, 'r') as handle:
        data = handle.readlines()
        header, rest = data[0], data[1:]
    random.shuffle(rest)
    with open(shuffled_csv_path, 'w') as handle:
        handle.write(header)
        for line in rest:
            handle.write(line)


def get_buckets(n_samples, dex_date_start, dex_date_end):
    n_buckets = dex_date_end - dex_date_start + 1
    bucket_size = n_samples // n_buckets
    remainder = n_samples % n_buckets

    return {key: bucket_size for key in range(dex_date_start, dex_date_end + 1)}, remainder


def filter_androzoo_dataset(n_samples, csv_path, dex_date_start, dex_date_end, vt_treshold, max_size, strategy):
    if strategy != constants.DOWNLOAD_STRATEGY_UNIFORM:
        return None

    samples_of_interest = []
    buckets, remainder = get_buckets(n_samples, dex_date_start, dex_date_end)

    for year, _ in zip(buckets.keys(), range(remainder, 0, -1)):
        buckets[year] += 1

    with open(csv_path, 'r') as csv_handle:
        reader = csv.DictReader(csv_handle)

        sampled = 0
        while sampled < n_samples:
            try:
                row = next(reader)
            except StopIteration:
                logging.warning(f'While you wished to sample {n_samples} from Androzoo, the filtered dataset contains only {sampled} samples.')
                return samples_of_interest

            virus_total = int(row['vt_detection']) if row['vt_detection'] != '' else 0
            dex_date = int(row['dex_date'].split('-')[0]) if row['dex_date'].split('-')[0] != '' else 0
            file_size = int(row['apk_size'])

            if virus_total >= vt_treshold and buckets.get(dex_date, 0) > 0 and file_size < max_size:
                samples_of_interest.append(row)
                sampled += 1
                buckets[dex_date] -= 1

    return samples_of_interest


def androzoo_parse_year(dex_date):
    return int(dex_date.split('-')[0]) if dex_date.split('-')[0] != '' else 0


def get_androzoo_url(sha256, api_key):
    return 'https://androzoo.uni.lu/api/download?apikey=' + api_key + '&sha256=' + sha256