from androidcrypto.evaluators.evaluator import Evaluator
import pandas as pd
import numpy as np
import yaml
import pprint


class JavaxCryptoEvaluator(Evaluator):
    def __init__(self, results_filepath, config_filepath):
        self.csv_results = results_filepath
        self.config_filepath = config_filepath

        self.df = pd.read_csv(self.csv_results)
        self.df_filtered = None
        with open(self.config_filepath, 'r') as stream:
            self.config = yaml.load(stream, Loader=yaml.FullLoader)

    @staticmethod
    def exclude_import_lines(df):
        return df[~df['line'].str.startswith('import')]

    @staticmethod
    def exclude_lines_with_key(df, column, key):
        return df[~df[column].str.contains(key)]

    @staticmethod
    def count_number_of_unique_files(df):
        return len(np.unique(df['path']))

    @staticmethod
    def count_trigger_counts(df, triggers):
        result = {key: 0 for key in triggers}
        df_triggers = df['triggered by']

        for index, keyword in df_triggers.iteritems():
            result[keyword] += 1

        return result

    def evaluate(self):
        pd.set_option('display.max_rows', None)
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', None)
        pd.set_option('display.max_colwidth', -1)

        self.df_filtered = self.df
        self.df_filtered = self.exclude_import_lines(self.df)

        df_test = self.df_filtered[self.df_filtered['triggered by'].str.contains('javax.crypto.SecretKey')]
        print(df_test.head(500))

        #self.df_filtered = self.exclude_lines_with_key(self.df_filtered, 'triggered by', 'MD5')
        #self.df_filtered = self.exclude_lines_with_key(self.df_filtered, 'triggered by', 'javax.net.ssl')

        # triggers = self.config['javax_extractor']['strings_to_search']
        # trigger_counts = self.count_trigger_counts(self.df_filtered, triggers)
        #
        # pp = pprint.PrettyPrinter(indent=4)
        # pp.pprint(trigger_counts)
