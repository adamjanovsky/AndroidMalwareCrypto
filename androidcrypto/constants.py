from enum import Enum

LOGS_FILENAME = 'androidcrypto_log.txt'
META_FILENAME = 'meta.yml'
DATA_DIRNAME = 'data'

JSON_FILENAME = 'records.json'
PROCESSED_JSON_FILENAME = 'processed_records.json'
DX_DIRNAME = 'dx'
APK_DIRNAME = 'apk'

BLOCKSIZE = 65536

TIMEOUT_CONSTANT = 900
JSON_CHUNK_SIZE = 1000

BASE64_EXP_RESULTS_FILENAME = 'base64_deobfuscated'

REPORT_FOLDER_NAME = 'report'

HTML_STRING = '''
<html>
  <head><title>HTML Pandas Dataframe with CSS</title></head>
  <link rel="stylesheet" href="https://unpkg.com/purecss@2.0.3/build/pure-min.css" integrity="sha384-cg6SkqEOCV1NbJoCu11+bm0NvBRc8IYLRGXkmNrqUBfTjmMYwNKPWBTIKyw9mHNJ" crossorigin="anonymous">
  <body>
    {table}
  </body>
</html>.
'''


class TaskName(Enum):
    DOWNLOAD = 'download'
    DECOMPILE = 'decompile'
    THIRD_PARTY_LIBS = 'third_party_libs'
    EVALUATE = 'evaluate'
    LABEL = 'label'

    def __str__(self):
        return str(self.value)

DATASET_BASE_DICT = {'metadata': {'androzoo_url': None, 'apk_path': None, 'dx_path': None}}

DOWNLOAD_STRATEGY_UNIFORM = 'uniform'

DATASET_MENDELEY_URL = 'https://www.ajanovsky.cz/features.csv'


class StatusCode(Enum):
    OK = 'ok'
    FAILED_ON_DOWNLOAD = 'failed_on_download'
    FAILED_ON_DECOMPILE = 'failed_on_decompile'
    FAILED_ON_THIRD_PARTY = 'failed_on_third_party'
    FAILED_ON_EVALUATE = 'failed_on_evaluate'
    FAILED_TIMEOUT = 'failed_on_timeout'
    FAILED_UNKNOWN = 'failed_on_unknown'
    FAILED_LABEL = 'failed_on_label'


ALL_TASKS = 'all'


class EvaluateException(Exception):
    pass


class ThirdPartyException(Exception):
    pass


class DecompileException(Exception):
    pass


class DownloadException(Exception):
    pass


class LabelException(Exception):
    pass


class DatasetException(Exception):
    pass


class ExperimentException(Exception):
    pass


AES = ['obfuscated', 'AES', 'AES/CBC/ISO10126Padding', 'AES/CBC/NoPadding', 'AES/CBC/PKCS5Padding',
       'AES/CFB/ISO10126Padding', 'AES/CFB/NoPadding', 'AES/CFB/PKCS5Padding', 'AES/CTR/ISO10126Padding',
       'AES/CTR/NoPadding', 'AES/CTR/PKCS5Padding', 'AES/CTS/ISO10126Padding', 'AES/CTS/NoPadding',
       'AES/CTS/PKCS5Padding', 'AES/ECB/ISO10126Padding', 'AES/ECB/NoPadding', 'AES/ECB/PKCS5Padding',
       'AES/OFB/ISO10126Padding', 'AES/OFB/NoPadding', 'AES/OFB/PKCS5Padding', 'AES/GCM/NoPadding', 'AES_128',
       'AES_128/CBC/NoPadding', 'AES_128/CBC/PKCS5Padding', 'AES_128/ECB/NoPadding', 'AES_128/ECB/PKCS5Padding',
       'AES_128/GCM/NoPadding', 'AES_256', 'AES_256/CBC/NoPadding', 'AES_256/CBC/PKCS5Padding',
       'AES_256/ECB/NoPadding', 'AES_256/ECB/PKCS5Padding', 'AES_256/GCM/NoPadding']
DES = ['obfuscated', 'DES', 'DES/CBC/ISO10126Padding', 'DES/CBC/NoPadding', 'DES/CBC/PKCS5Padding',
       'DES/CFB/ISO10126Padding', 'DES/CFB/NoPadding', 'DES/CFB/PKCS5Padding', 'DES/CTR/ISO10126Padding',
       'DES/CTR/NoPadding', 'DES/CTR/PKCS5Padding', 'DES/CTS/ISO10126Padding', 'DES/CTS/NoPadding',
       'DES/CTS/PKCS5Padding', 'DES/ECB/ISO10126Padding', 'DES/ECB/NoPadding', 'DES/ECB/PKCS5Padding',
       'DES/OFB/ISO10126Padding', 'DES/OFB/NoPadding', 'DES/OFB/PKCS5Padding']
DESEDE = ['obfuscated', 'DESede', 'DESede/CBC/ISO10126Padding', 'DESede/CBC/NoPadding',
          'DESede/CBC/PKCS5Padding', 'DESede/CFB/ISO10126Padding', 'DESede/CFB/NoPadding',
          'DESede/CFB/PKCS5Padding', 'DESede/CTR/ISO10126Padding', 'DESede/CTR/NoPadding',
          'DESede/CTR/PKCS5Padding', 'DESede/CTS/ISO10126Padding', 'DESede/CTS/NoPadding',
          'DESede/CTS/PKCS5Padding', 'DESede/ECB/ISO10126Padding', 'DESede/ECB/NoPadding',
          'DESede/ECB/PKCS5Padding', 'DESede/OFB/ISO10126Padding', 'DESede/OFB/NoPadding',
          'DESede/OFB/PKCS5Padding']
CHACHA = ['obfuscated', 'ChaCha20', 'ChaCha20/NONE/NoPadding', 'ChaCha20/Poly1305/NoPadding']
BLOWFISH = ['obfuscated', 'BLOWFISH', 'BLOWFISH/CBC/ISO10126Padding', 'BLOWFISH/CBC/NoPadding',
            'BLOWFISH/CBC/PKCS5Padding', 'BLOWFISH/CFB/ISO10126Padding', 'BLOWFISH/CFB/NoPadding',
            'BLOWFISH/CFB/PKCS5Padding', 'BLOWFISH/CTR/ISO10126Padding', 'BLOWFISH/CTR/NoPadding',
            'BLOWFISH/CTR/PKCS5Padding', 'BLOWFISH/CTS/ISO10126Padding', 'BLOWFISH/CTS/NoPadding',
            'BLOWFISH/CTS/PKCS5Padding', 'BLOWFISH/ECB/ISO10126Padding', 'BLOWFISH/ECB/NoPadding',
            'BLOWFISH/ECB/PKCS5Padding', 'BLOWFISH/OFB/ISO10126Padding', 'BLOWFISH/OFB/NoPadding',
            'BLOWFISH/OFB/PKCS5Padding']
RC4 = ['obfuscated', 'ARC4', 'ARC4/ECB/NoPadding', 'ARC4/NONE/NoPadding']
RSA = ['obfuscated', 'RSA', 'RSA/ECB/NoPadding', 'RSA/ECB/OAEPPadding', 'RSA/ECB/PKCS1Padding',
       'RSA/NONE/NoPadding', 'RSA/NONE/OAEPPadding', 'RSA/NONE/PKCS1Padding']
OEAP = ['obfuscated', 'OAEPwithSHA-1andMGF1Padding', 'OAEPwithSHA-256andMGF1Padding',
        'OAEPwithSHA-224andMGF1Padding', 'OAEPwithSHA-384andMGF1Padding', 'OAEPwithSHA-512andMGF1Padding']
PRIMITIVES = {'aes': AES, 'des': DES, 'desede': DESEDE, 'chacha': CHACHA, 'blowfish': BLOWFISH, 'rc4': RC4,
              'rsa': RSA, 'oeap': OEAP}