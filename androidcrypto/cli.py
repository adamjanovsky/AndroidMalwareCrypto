import argparse
from androidcrypto.dataset import Dataset, DatasetException
from androidcrypto.analyzers import experiment
import androidcrypto.constants as constants
from datetime import datetime
import yaml
import sys


class TaskConfig:
    def __init__(self):
        pass


class TaskDownloadConfig(TaskConfig):
    def __init__(self, start_year, end_year, max_size, csv_path, minimal_vt_positives, n_samples, api_token):
        super().__init__()
        self.start_year = start_year
        self.end_year = end_year
        self.max_size = max_size
        self.csv_path = csv_path
        self.minimal_vt_positives = minimal_vt_positives
        self.n_samples = n_samples
        self.api_token = api_token


class ExperimentConfig:
    """
    This class should carry all information parsed from the yaml configuration files.
    Moreover, it should be accessible as a whole to the Task instances. At the same time
    it should not carry any information specific to the tasks, nor it should describe the state of the task.
    """
    def __init__(self, exp_name, neptune_api_token, neptune_project_name, is_being_logged, dset, n_threads, stream, config_path, tasks):
        self.experiment_name = exp_name
        self.neptune_api_token = neptune_api_token
        self.neptune_project_name = neptune_project_name
        self.is_being_logged = is_being_logged
        self.dset = dset
        self.n_threads = n_threads
        self.stream = stream
        self.config_path = config_path
        self.tasks = tasks
        self.task_configs = {key: None for key in self.tasks}


def parse_config_file(path_to_config_file, neptune_token, androzoo_token=None):
    """
    Parses the yaml configuration file of the experiment.
    :return:
    """
    with open(path_to_config_file) as stream:
        config_stream = yaml.load(stream, Loader=yaml.FullLoader)
        is_being_logged = neptune_token is not None and config_stream['is_being_logged'] is True
        neptune_project_name = config_stream['neptune_project_name'] if is_being_logged else None
        dataset_path = config_stream['dataset_path']
        n_threads = int(config_stream['n_threads'])
        tasks = config_stream['tasks']
        try:
            dset = Dataset(dataset_path)
        except DatasetException:
            sys.exit(1)

        experiment_config = ExperimentConfig(config_stream['experiment_name'],
                                             neptune_token,
                                             neptune_project_name,
                                             is_being_logged,
                                             dset,
                                             n_threads,
                                             config_stream,
                                             path_to_config_file,
                                             tasks)
        if constants.TASK_DOWNLOAD in config_stream:
            download_stream = config_stream[constants.TASK_DOWNLOAD]
        download_config = TaskDownloadConfig(download_stream['start_year'],
                                             download_stream['end_year'],
                                             download_stream['max_size'],
                                             download_stream['csv_path'],
                                             download_stream['minimal_vt_positives'],
                                             download_stream['n_samples'],
                                             androzoo_token)
        experiment_config.task_configs[constants.TASK_DOWNLOAD] = download_config

        return experiment_config


def main():
    parser = argparse.ArgumentParser(description='Mapping the ecosystem of cryptography usage in Android malware. This project is a joint work of Masaryk University and University of Cagliari.')

    parser.add_argument('config', type=str, help='path to the file with config.yml')
    parser.add_argument('-n', '--neptune', type=str, help='Neptune.ml API token', default=None)
    parser.add_argument('-a', '--androzoo', type=str, help='Androzoo API token', default=None)
    args = parser.parse_args()

    start = datetime.now()
    experiment_config = parse_config_file(args.config, args.neptune, args.androzoo)
    exp = experiment.Experiment(experiment_config)
    exp.run()
    end = datetime.now()
    print(f'Computation took: {end - start} seconds.')


if __name__ == '__main__':
    main()
