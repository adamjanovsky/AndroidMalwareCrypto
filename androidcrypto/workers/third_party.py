import json
import subprocess
from stopit import TimeoutException
from androidcrypto.constants import ThirdPartyException
import logging


def is_crypto_lib(suspect, crypto_libs):
    for lib in crypto_libs:
        if isinstance(lib, list) and all([x in suspect for x in lib]):
            return True
        elif isinstance(lib, str) and lib in suspect:
            return True
    return False


def third_party_worker(sample, task_config):
    try:
        string_to_call = 'python2 ' + task_config.literadar_path + ' ' + sample.apk_path + ' ' + sample.literadar_tmp_path
        p = subprocess.Popen(string_to_call, shell=True)
        p.communicate()

        with open(sample.literadar_tmp_path, 'r') as handle:
            data = json.load(handle)

        sample.third_party_packages = []
        sample.third_party_crypto_libs = []

        for lib in data:
            sample.third_party_packages.append(lib['Package'])
            if is_crypto_lib(lib['Standard Package'], task_config.crypto_libs):
                sample.third_party_crypto_libs.append(lib['Standard Package'])

    except Exception as e:
        try:
            p.terminate()
        except Exception as e:
            raise ThirdPartyException(f'Failed to kill hanging LibRadar process due to: {e}')
        if isinstance(e, TimeoutException):
            raise
        else:
            logging.error(f'Failed on {e}')
            raise ThirdPartyException
