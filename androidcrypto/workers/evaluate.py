import lzma, pickle
import itertools
from androidcrypto.constants import EvaluateException
from stopit import TimeoutException


def evaluate_worker(sample_record, keywords):
    try:
        dx_path = sample_record['metadata']['dx_path']
        third_party_packages = sample_record['third_party_libs']
        crypto_api = {}

        with lzma.open(dx_path, 'rb') as handle:
            sample = pickle.load(handle)
        classes = sample.get_classes()

        for cls in classes:
            src_class = cls.get_vm_class().get_source()
            if src_class is None:
                continue
            class_api = []

            if third_party_packages and any([x in str(cls.name) for x in third_party_packages]):
                continue

            for i, line in enumerate(src_class.split('\n')):
                class_api.extend([[keyword, line, i] for keyword in keywords if keyword in line])

            # The ugly one-liner does the same thing as the two lines above :)
            # class_api = [[x, line, i] for x, (i, line) in itertools.product(keywords, enumerate(src_class.split('\n'))) if x in line

            if class_api:
                crypto_api[str(cls.name)] = class_api

        sample_record['crypto_api'] = crypto_api

    except Exception as e:
        if isinstance(e, TimeoutException):
            raise
        else:
            raise EvaluateException
