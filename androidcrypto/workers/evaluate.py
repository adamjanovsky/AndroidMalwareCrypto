from androidcrypto.constants import EvaluateException
from stopit import TimeoutException

native_imports_keywords = ['ReLinker.loadLibrary', 'System.loadLibrary', 'Native.loadLibrary']


def get_class_cryptographic_api(class_source, imports_to_search, keywords_to_search, native_crypto_libs):
    if class_source is None:
        return None, None

    class_api = []
    class_imports = []
    native_imports = set()

    for i, line in enumerate(class_source.split('\n')):
        if not line.startswith('import') and (all_keywords := [(keyword, line, i) for keyword in keywords_to_search if keyword.lower() in line.lower()]):
            class_api.extend(all_keywords)
        if all_crypto_imports := [x.lower() for x in imports_to_search if x.lower() in line.lower()]:
            class_imports += all_crypto_imports
        if any([(x in line) for x in native_imports_keywords]) and any([(x.lower() in line.lower()) for x in native_crypto_libs]):
            native_imports.add(line)

    return class_api, class_imports, native_imports


def evaluate_worker(sample, task_config):
    try:
        crypto_api = {}
        crypto_imports = dict()
        native_imports = set()

        classes = sample.load_dx_from_file().get_classes()

        for cls in classes:
            class_source = cls.get_vm_class().get_source()
            if sample.third_party_packages and any([x in str(cls.name) for x in sample.third_party_packages]):
                continue

            class_api, class_imports, class_native_imports = get_class_cryptographic_api(class_source, task_config.imports, task_config.keywords, task_config.native_imports)

            if class_api:
                crypto_api[str(cls.name)] = class_api

            for imported_class in class_imports:
                if imported_class in crypto_imports:
                    crypto_imports[imported_class] += 1
                else:
                    crypto_imports[imported_class] = 1
            native_imports.update(class_native_imports)

        sample.crypto_imports = crypto_imports
        sample.crypto_api_records = crypto_api
        sample.native_imports = list(native_imports)

    except Exception as e:
        if isinstance(e, TimeoutException):
            raise
        else:
            raise EvaluateException
