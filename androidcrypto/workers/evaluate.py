import lzma, pickle
import itertools
from androidcrypto.constants import EvaluateException
from stopit import TimeoutException


def evaluate_worker(sample, task_config):
    try:
        crypto_api = {}
        crypto_imports = set()

        with lzma.open(sample.dx_path, 'rb') as handle:
            dx = pickle.load(handle)
        classes = dx.get_classes()

        for cls in classes:
            src_class = cls.get_vm_class().get_source()
            if src_class is None:
                continue
            class_api = []

            if sample.third_party_packages and any([x in str(cls.name) for x in sample.third_party_packages]):
                continue

            for i, line in enumerate(src_class.split('\n')):
                crypto_imports.update([x.lower() for x in task_config.imports if x.lower() in line.lower()])
                class_api.extend([[keyword, line, i] for keyword in task_config.keywords if keyword in line])

            # The ugly one-liner does the same thing as the two lines above :)
            # class_api = [[x, line, i] for x, (i, line) in itertools.product(task_config.keywords, enumerate(src_class.split('\n'))) if x in line

            if class_api:
                crypto_api[str(cls.name)] = class_api

        sample.crypto_imports = list(crypto_imports)
        sample.crypto_api_records = crypto_api

    except Exception as e:
        if isinstance(e, TimeoutException):
            raise
        else:
            raise EvaluateException
