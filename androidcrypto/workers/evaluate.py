import lzma, pickle
from androidcrypto.constants import EvaluateException
from stopit import TimeoutException


def evaluate_worker(sample_record, keywords, third_party_cryptolibs=None):
    try:
        dx_path = sample_record['metadata']['dx_path']
        third_party_packages = sample_record['third_party_libs']
        crypto_libs_imports = set()
        crypto_api = {}

        with lzma.open(dx_path, 'rb') as handle:
            sample = pickle.load(handle)
        classes = sample.get_classes()

        for cls in classes:
            src_class = cls.get_vm_class().get_source()
            if src_class is None:
                continue

            if third_party_packages and any([x in str(cls.name) for x in third_party_packages]):
                continue

            per_class_result = []

            for i, line in enumerate(src_class.split('\n')):
                for word in keywords:
                    if word in line:
                        per_class_result.append([word, line, i])

                # When searching for 3rd party crypto librarires, those must be provided in a form of `org.bouncycastle` etc.
                for lib in third_party_cryptolibs:
                    if lib in line:
                        crypto_libs_imports.add(line)

            if per_class_result:
                crypto_api[str(cls.name)] = per_class_result

        sample_record['crypto_api'] = crypto_api

        if third_party_cryptolibs is not None:
            sample_record['java_crypto_libs'] = list(crypto_libs_imports)

    except Exception as e:
        if isinstance(e, TimeoutException):
            raise
        else:
            raise EvaluateException
