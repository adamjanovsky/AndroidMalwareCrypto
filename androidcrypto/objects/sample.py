import androidcrypto.helpers as helpers
import androidcrypto.constants as constants
import json


class Sample:
    # slots experiment. Decreases size of object from 4000 bytes to 150 bytes, may be worth it. The measurement may be fake, should check RAM consumption
    __slots__ = ('sha256', 'androzoo_url', 'dex_year', 'vt_url', 'dx_path', 'apk_path', 'third_party_packages', 'third_party_crypto_libs',
                 'crypto_api_records', 'euphony_name', 'euphony_type', 'crypto_imports')

    # 1. Init from apk file: Only path to apk is known, rest is computed
    # 2. Init from androzoo: Androzoo url, dex_date and sha256 are known
    # 3. Init from dictionary: all elements are known

    # TODO: Try to init the object and compute its size in memory, try if it scales e.g. to 500k objects
    def __init__(self, sha256, androzoo_url, dex_year):

        self.sha256 = sha256.lower()
        self.androzoo_url = androzoo_url
        self.dex_year = dex_year

        self.vt_url = None
        self.dx_path = None
        self.apk_path = None
        self.third_party_packages = None
        self.third_party_crypto_libs = None
        self.crypto_api_records = None

        self.euphony_name = None
        self.euphony_type = None
        self.crypto_imports = None

    def __repr__(self):
        return f'Sample_id: {self.sha256}'

    def __str__(self):
        return f'Sample_id: {self.sha256}'


    @classmethod
    def from_dict(cls, sha256, dct):
        androzoo_url = dct['metadata'].get('androzoo_url', None)
        dex_year = dct['metadata'].get('dex_year', None)
        sample = cls(sha256, androzoo_url, dex_year)

        sample.apk_path = dct['metadata'].get('apk_path', None)
        sample.dx_path = dct['metadata'].get('dx_path', None)
        sample.vt_url = dct['metadata'].get('vt_url', None)
        sample.euphony_name = dct['metadata'].get('euphony_name', None)
        sample.euphony_type = dct['metadata'].get('euphony_type', None)

        sample.third_party_packages = dct.get('third_party_libs', [])
        sample.crypto_api_records = dct.get('crypto_api', {})
        sample.third_party_crypto_libs = dct.get('third_party_crypto_libs', [])
        sample.crypto_imports = dct.get('crypto_imports', [])

        return sample

    @classmethod
    def from_apk(cls, apk_path):
        try:
            sha256 = helpers.hash_file(apk_path)
        except OSError:
            raise constants.DatasetException
        return cls(sha256, None, None)
