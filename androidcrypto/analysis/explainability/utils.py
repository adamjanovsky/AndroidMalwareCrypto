from typing import List, Union, Any, Optional
import itertools

import pandas as pd
import numpy as np

def save_as_df_to_hdf(
    array: Union[List[Any], np.array],
    path: str,
    key: str,
    columns: Optional[List[str]]=None
    ) -> Optional[Union[List[pd.DataFrame], pd.DataFrame]]:
    """Saves given array of numbers as dataframe under given key into hdf (h5) file.

    Returns list of dataframes for 3D and a dataframe for 1D or 2D.
    """

    array = np.array(array) # cast to numpy array just in case
    if len(array.shape) > 3:
        print("Saving more than three dimensions is not supported.")
        return None
    
    if len(array.shape) == 3:
        dfs = []
        for i in range(array.shape[0]):
            matrix_df = pd.DataFrame(array[i], columns=columns)
            dfs.append(matrix_df)
            matrix_df.to_hdf(path, key=f"{key}_{i}")
        return dfs
            
    # 2 dimensions - typical matrix
    df = pd.DataFrame(array, columns=columns)
    df.to_hdf(path, key=key, format="fixed")
    return df

def safe_load_df_from_hdf(path: str, key: str, dimension: int=2) -> Optional[Union[List[pd.DataFrame], pd.DataFrame]]:
    """Safely loads dataframe from hdf file if key is present there else returns None.

    Returns
        None for dimension > 3
        list of dataframes during failure for dimension 3
        dataframe or None if key not found for dimension < 3
    """

    if dimension > 3:
        print("Loading more than three dimensions is not supported.")
        return None

    if dimension == 3:
        result = []
        for i in itertools.count(start=0):
            try:
                result.append(pd.read_hdf(path, key=f"{key}_{i}"))
            except KeyError:
                return result
        
    try:
        return pd.read_hdf(path, key=key)
    except KeyError:
        return None
