"""
File contains functions used to train Naive Bayes.

Author: Dominik Macko
"""

from typing import Dict, Any, Union, Callable, Tuple, Optional

import numpy as np
import pandas as pd
from sklearn.naive_bayes import ComplementNB, GaussianNB
import joblib

from .generic import train_model, train_gridsearchcv_model
from .utils import get_inverse_class_priors, is_multiclass
from .config import TrainingTaskConfig

def naive_bayes_best_params_surroundings(best_params: Dict[str, Any]) -> Dict[str, Any]:
    """Get best parameters surroundings for random forest."""
    
    alpha = best_params["alpha"]
    return {
        "alpha": [alpha - 0.05, alpha, min(alpha + 0.05, 1.0)]
    }

def train_complement_naive_bayes(train_X: np.array,
                                 train_y: np.array,
                                 scoring: Union[str, Callable[[Any, np.array, np.array], int]]="f1_macro",
                                 n_jobs: int=8,
                                 verbose: int=3,
                                 seed: int=42,
                                 cv_splits: int=5
                                ) -> Tuple[ComplementNB, pd.DataFrame]:
    """Trains complement naive bayes by searching for optimal alpha smoothing term.
    
    train_X - training set features
    train_y - training set targets
    scoring - scikit scoring function to use
    n_jobs - threads to use
    verbose - scikit verbose level to use
    
    returns (model, history dataframe)
    """
    
    grid = {
        "alpha": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    }
    return train_model(
        ComplementNB(),
        train_gridsearchcv_model,
        train_gridsearchcv_model,
        grid,
        naive_bayes_best_params_surroundings,
        train_X,
        train_y,
        scoring=scoring,
        n_jobs=n_jobs,
        verbose=verbose,
        seed=seed,
        cv_splits=cv_splits
    )

def train_gaussian_naive_bayes(train_X: np.array,
                               train_y: np.array,
                               use_inverse_priors: bool=True
                              ) -> GaussianNB:
    """Trains Gaussian naive bayes and returns it with score on validation set.
    
    train_X - training set features
    train_y - training set targets
    use_inverse_priors - specifies whether to use inverse class priors
    
    returns model
    """

    if use_inverse_priors:
        model = GaussianNB(priors=get_inverse_class_priors(pd.Series(train_y.ravel())))
    else:
        model = GaussianNB()
    model.fit(train_X, train_y.ravel())
    return model

def train_gnb_based_on_config(train_X: pd.DataFrame, 
                                        train_y: pd.Series, 
                                        test_X: Optional[pd.DataFrame], 
                                        task_config: TrainingTaskConfig,
                                        ) -> Tuple[GaussianNB, Optional[pd.DataFrame]]:
    
    print("Training: GNB: Starting training.")
    model = train_gaussian_naive_bayes(train_X.values, train_y.values)
    if task_config.output_model_path:
        print("Training: GNB: Saving model.")
        joblib.dump(model, task_config.output_model_path)

    test_pred = None
    if test_X is not None:
        print("Training: GNB: Predicting test labels.")
        test_pred = model.predict(test_X)
        if task_config.output_prediction_path:
            print("Training: GNB: Saving predicted test labels.")
            pd.Series(test_pred).to_csv(task_config.output_prediction_path)
    
    return model, test_pred

def train_cnb_based_on_config(train_X: pd.DataFrame, 
                              train_y: pd.Series, 
                              test_X: Optional[pd.DataFrame], 
                              task_config: TrainingTaskConfig,
                              cv_splits: int
                              ) -> Tuple[ComplementNB, Optional[pd.DataFrame]]:
    
    print("Training: CNB: Starting training.")
    if is_multiclass(train_y):
        metric = "f1_macro"
    else:
        metric = "f1"
    model, _ = train_complement_naive_bayes(train_X.values, train_y.values, scoring=metric, cv_splits=cv_splits)
    if task_config.output_model_path:
        print("Training: CNB: Saving model.")
        joblib.dump(model, task_config.output_model_path)

    test_pred = None
    if test_X is not None:
        print("Training: CNB: Predicting test labels.")
        test_pred = model.predict(test_X)
        if task_config.output_prediction_path:
            print("Training: CNB: Saving predicted test labels.")
            pd.Series(test_pred).to_csv(task_config.output_prediction_path)
    
    return model, test_pred
