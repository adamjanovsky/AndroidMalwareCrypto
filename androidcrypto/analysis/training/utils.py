"""
File contains functions that are used as utilities during training.

Author: Dominik Macko
"""

from typing import Union, List, Dict, Callable, Any

import numpy as np
import pandas as pd
import sklearn
from sklearn.utils.class_weight import compute_class_weight


def compute_balanced_class_weights(train_y: Union[np.array, pd.Series, List[any]]
                                 ) -> Dict[int, float]:
    """Computes balanced class weight dictionary from train targets.
    
    The key is a index of sorted unique values occuring in train_y.
    """

    unique = sorted(np.unique(train_y))
    weights = compute_class_weight("balanced", classes=unique, y=train_y)
    return {i: weights[i] for i in range(len(unique))}

def compute_balanced_class_weights_array(train_y: Union[np.array, pd.Series, List[any]]) -> List[float]:
    """Computes array of balanced class weights for LGBM."""
    
    class_weights = compute_balanced_class_weights(train_y)
    label2id = { label: i for i, label in enumerate(sorted(np.unique(train_y))) }
    return [class_weights[label2id[label]] for label in train_y]

def get_inverse_class_priors(train_y: pd.Series) -> List[float]:
    """Gets inverse class priors for the classes found in given series."""
    
    probabilities = train_y.value_counts(normalize=True).to_list()
    inv = [(1 - p) for p in probabilities]
    return [p / sum(inv) for p in inv]

def cross_val_score_weighted(model: Any,
                              X: Union[pd.DataFrame, np.array], 
                              y: Union[pd.Series, np.array], 
                              weights: Union[List[float], np.array, pd.Series], 
                              cv_splitter: Any, 
                              scoring: Callable=None
                              ) -> np.array:
    """ Cross validates using weights.
    
    credits: https://github.com/scikit-learn/scikit-learn/issues/4632#issuecomment-393945555
    """
    cv_splitter.get_n_splits(X)
    scores = []
    weights = np.array(weights) # just in case cast to np array
    for train_index, test_index in cv_splitter.split(X):
        model_clone = sklearn.base.clone(model)
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        weights_train, weights_test = weights[train_index], weights[test_index]
        model_clone.fit(X_train, y_train, sample_weight=weights_train)
        scores.append(scoring(model, X_test, y_test, sample_weight=weights_test))
    return np.array(scores)

def is_multiclass(train_y: pd.Series) -> bool:
    """Decides whether the classsification problem is multiclass."""

    return len(train_y.unique()) > 2

def get_feature_types(df: pd.DataFrame) -> List[str]:
    """Gets feature types into categorical or continuous."""

    is_cat = df.apply(lambda col: pd.api.types.is_bool_dtype(col) or pd.api.types.is_categorical(col)).to_list()
    return ["categorical" if b else "continuous" for b in is_cat]
