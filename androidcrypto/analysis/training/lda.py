"""
File contains functions used to train Linear Discriminant Analysis.

Author: Dominik Macko
"""

from typing import Tuple, Optional

import numpy as np
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import joblib

from .utils import get_inverse_class_priors
from .config import TrainingTaskConfig

def train_lda(train_X: np.array,
              train_y: np.array,
              use_inverse_priors: bool=True
              ) -> LinearDiscriminantAnalysis:
    """Trains L.
    
    train_X - training set features
    train_y - training set targets
    use_inverse_priors - specifies whether to use inverse class priors
    
    returns model
    """
    
    if use_inverse_priors:
        model = LinearDiscriminantAnalysis(solver="svd", priors=get_inverse_class_priors(pd.Series(train_y.ravel())))
    else:
        model = LinearDiscriminantAnalysis(solver="svd")
    model.fit(train_X, train_y.ravel())
    return model
    
def train_lda_based_on_config(train_X: pd.DataFrame, 
                                        train_y: pd.Series, 
                                        test_X: Optional[pd.DataFrame], 
                                        task_config: TrainingTaskConfig
                                        ) -> Tuple[LinearDiscriminantAnalysis, Optional[pd.DataFrame]]:
    
    print("Training: LDA: Starting training.")
    model = train_lda(train_X.values, train_y.values)
    if task_config.output_model_path:
        print("Training: LDA: Saving model.")
        joblib.dump(model, task_config.output_model_path)

    test_pred = None
    if test_X is not None:
        print("Training: LDA: Predicting test labels.")
        test_pred = model.predict(test_X)
        if task_config.output_prediction_path:
            print("Training: LDA: Saving predicted test labels.")
            pd.Series(test_pred).to_csv(task_config.output_prediction_path)
    
    return model, test_pred
    