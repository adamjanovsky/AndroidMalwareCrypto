import pandas as pd
from .summary_stats_extractor import SummaryStats
import pathlib
import os
import sys

import matplotlib.ticker as mtick
import seaborn as sns
import matplotlib.pyplot as plt

from typing import Dict, Tuple, List, Optional

class SummaryStatsPlotter:

    def __init__(self, output_dir: pathlib.Path):
        
        self._output_dir = output_dir

    def plot_all(self, stats: SummaryStats, include_special_paper_plots: bool=True):
        """Plots all plots."""
        
        self.plot_general_plots(stats)
        if include_special_paper_plots:
            self.plot_special_plots(stats)

    def plot_general_plots(self, stats: SummaryStats):
        """Plots all the general plots."""
        
        # labels
        self.plot_label_maliciousness(stats.label_maliciousness)
        self.plot_label_types(stats.label_types)
        self.plot_label_families(stats.label_families)

        # (import) usages
        self.plot_crypto_api_imports_usage(stats.crypto_api_imports_usage)
        self.plot_native_crypto_libs_usage(stats.native_crypto_libs_usage)
        self.plot_third_party_crypto_libs_usage(stats.third_party_crypto_libs_usage)
        self.plot_third_party_packages_usage(stats.third_party_packages_usage)

        # records usages
        self.plot_crypto_api_records_overall_usage(stats.crypto_api_records_overall_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_hashing_usage(stats.crypto_api_records_hashing_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_encryption_usage(stats.crypto_api_records_encryption_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_key_agreement_usage(stats.crypto_api_records_key_agreement_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_key_pair_generator_usage(stats.crypto_api_records_key_pair_generator_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_mac_usage(stats.crypto_api_records_mac_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_api_records_secure_random_usage(stats.crypto_api_records_secure_random_usage, stats.crypto_api_imports_usage)


    def plot_label_maliciousness(self, label_maliciousness: pd.DataFrame):

        # TODO
        pass

    def plot_label_types(self, label_types: pd.DataFrame):

        # TODO
        pass

    def plot_label_families(self, label_families: pd.DataFrame):

        # TODO
        pass

    def plot_crypto_api_imports_usage(self, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding crypto api imports usage."""
        
        self._plot_usage(crypto_api_imports_usage, "crypto_imports")

    def plot_native_crypto_libs_usage(self, native_crypto_libs_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding native crypto libs usage."""
        
        self._plot_usage(native_crypto_libs_usage, "native_crypto")

    def plot_third_party_crypto_libs_usage(self, third_party_crypto_libs_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding third party crypto libs usage."""
        
        self._plot_usage(third_party_crypto_libs_usage, "third_party_crypto")

    def plot_third_party_packages_usage(self, third_party_packages_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding third party packages usage."""
        
        self._plot_usage(third_party_packages_usage, "third_party_packages")

    def plot_crypto_api_records_overall_usage(self, crypto_api_records_overall_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding overall (total) crypto api usage."""

        self._plot_records_usage(crypto_api_records_overall_usage, crypto_api_imports_usage, "Total crypto API")

    def plot_crypto_api_records_hashing_usage(self, crypto_api_records_hashing_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding hashing crypto api usage."""

        self._plot_records_usage(crypto_api_records_hashing_usage, crypto_api_imports_usage, "Hash functions")

    def plot_crypto_api_records_encryption_usage(self, crypto_api_records_encryption_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding encryption crypto api usage."""

        self._plot_records_usage(crypto_api_records_encryption_usage, crypto_api_imports_usage, "Encryption")

    def plot_crypto_api_records_key_agreement_usage(self, crypto_api_records_key_agreement_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding key agreement crypto api usage."""

        self._plot_records_usage(crypto_api_records_key_agreement_usage, crypto_api_imports_usage, "Key agreement")

    def plot_crypto_api_records_key_pair_generator_usage(self, crypto_api_records_key_pair_generator_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding key pair generator crypto api usage."""

        self._plot_records_usage(crypto_api_records_key_pair_generator_usage, crypto_api_imports_usage, "Key pair generator")

    def plot_crypto_api_records_mac_usage(self, crypto_api_records_mac_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding MAC crypto api usage."""

        self._plot_records_usage(crypto_api_records_mac_usage, crypto_api_imports_usage, "MAC")

    def plot_crypto_api_records_secure_random_usage(self, crypto_api_records_secure_random_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):
        """Plot barplot and time evolution regarding secure random crypto api usage."""

        self._plot_records_usage(crypto_api_records_secure_random_usage, crypto_api_imports_usage, "Secure random")

    # below are special plots (paper)

    def plot_special_plots(self, stats: SummaryStats):
        """Plots special plots (for the paper.)"""
        
        self.plot_aes_vs_des(stats.crypto_api_records_encryption_usage, stats.crypto_api_imports_usage)
        self.plot_rsa_popularity(stats.crypto_api_records_encryption_usage, stats.crypto_api_imports_usage)
        self.plot_crypto_usage_stack_plot(stats.crypto_api_records_overall_usage, stats.crypto_api_imports_usage)

    def plot_aes_vs_des(self, crypto_api_records_encryption_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):

        df = self._convert_records_usage_to_percentage(crypto_api_records_encryption_usage, crypto_api_imports_usage)
        df = df[df["metadata_dex_year"] != "total"]
        df = df[df["category"].isin(["AES", "DES"])]

        # three plots, for total/benign/malicious
        for maliciousness in df["maliciousness"].unique():
             self._evolution_plot(
                df, "metadata_dex_year", "n_apks", "category",
                f"AES vs. DES for {maliciousness}",
                os.path.join(self._output_dir, f"AESvsDES_{maliciousness}_evolution.png")
            )

        # combined plot where 
        df["category+maliciousness"] = df["category"] + " " + df["maliciousness"]
        self._evolution_plot(df, "metadata_dex_year", "n_apks", "category+maliciousness",
            "AES vs. DES", os.path.join(self._output_dir, f"AESvsDES_evolution.png"))

    def plot_rsa_popularity(self, crypto_api_records_encryption_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):

        df = self._convert_records_usage_to_percentage(crypto_api_records_encryption_usage, crypto_api_imports_usage)
        df = df[df["category"] == "RSA"]
        self._evolution_plot(df, "metadata_dex_year", "n_apks", "maliciousness",
            "RSA", os.path.join(self._output_dir, f"RSA_evolution.png"))

    def plot_crypto_usage_stack_plot(self, crypto_api_records_overall_usage: pd.DataFrame, crypto_api_imports_usage: pd.DataFrame):

        df = self._convert_records_usage_to_percentage(
            crypto_api_records_overall_usage, 
            crypto_api_imports_usage, 
            maliciousness_for_normalization="any"
            )
        # fill combinations where combination of category, maliciousness a,d year does not have any apks
        for category in df["category"].unique():
            for year in df["metadata_dex_year"].unique():
                for maliciousness in df["maliciousness"].unique():
                    if ((df["category"] == category) & (df["metadata_dex_year"] == year) & (df["maliciousness"] == maliciousness)).any():
                        continue
                    row = pd.Series({
                        "category": category,
                        "metadata_dex_year": year,
                        "maliciousness": maliciousness,
                        "n_apks": 0
                    })
                    df = df.append(row, ignore_index=True)
        df.sort_values(by=["category", "maliciousness", "metadata_dex_year"], inplace=True)        

        # total stack plot
        self._stack_plot(
            df[(df["category"] == "total") & (df["metadata_dex_year"] != "total") & (df["maliciousness"] != "any")],
            "metadata_dex_year", 
            "n_apks", 
            "maliciousness", 
            "",
            os.path.join(self._output_dir, f"crypto_usage_total_stackplot.png")
            )
        # per maliciousness stack plot
        for maliciousness in df["maliciousness"].unique():
            self._stack_plot(
                df[(df["category"] != "total") & (df["metadata_dex_year"] != "total") & (df["maliciousness"] == maliciousness)],
                "metadata_dex_year", 
                "n_apks", 
                "category",
                "", 
                os.path.join(self._output_dir, f"crypto_usage_{maliciousness}_stackplot.png")
                )

    

    # below are private methods used
            

    @staticmethod
    def _bar_plot(
        df: pd.DataFrame, x: str, y: str, hue: Optional[str],
        title: str, output: pathlib.Path, 
        xlabel: str="Year", ylabel: str="% of all samples"):

        ax = sns.barplot(x=x, y=y, hue=hue, data=df)
        # ax.yaxis.set_major_locator(mtick.MultipleLocator(5)) # density of grid lines, 5% now
        ax.xaxis.set_major_locator(mtick.MultipleLocator(1))
        ax.yaxis.set_major_formatter(mtick.PercentFormatter())
        ax.set(xlabel=xlabel, ylabel=ylabel, title=title)
        ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
        ax.figure.savefig(output, dpi=300, format="png", bbox_inches="tight", pad_inches=0.1)
        plt.close()

    @staticmethod
    def _evolution_plot(
        df: pd.DataFrame, x: str, y: str, hue: Optional[str],
        title: str, output: pathlib.Path, 
        xlabel: str="Year", ylabel: str="% of all samples"):

        ax = sns.lineplot(x=x, y=y, hue=hue, data=df, marker="o")
        # ax.yaxis.set_major_locator(mtick.MultipleLocator(5)) # density of grid lines, 5% now
        ax.xaxis.set_major_locator(mtick.MultipleLocator(1))
        ax.yaxis.set_major_formatter(mtick.PercentFormatter())
        ax.set(xlabel=xlabel, ylabel=ylabel, title=title)
        ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
        ax.figure.savefig(output, dpi=300, format="png", bbox_inches="tight", pad_inches=0.1)
        plt.close()

    @staticmethod
    def _stack_plot(
        df: pd.DataFrame, x: str, y: str, hue: str,
        title: str, output: pathlib.Path, 
        xlabel: str="Year", ylabel: str="% of all samples"):

        maliciousnesses = [*df[hue].unique()]
        fig, ax = plt.subplots()
        ax.stackplot(
            df[x].unique(),
            [ df[df[hue] == m][y] for m in maliciousnesses ],
            labels=maliciousnesses
        )
        ax.xaxis.set_major_locator(mtick.MultipleLocator(1))
        ax.yaxis.set_major_formatter(mtick.PercentFormatter())
        ax.set(xlabel=xlabel, ylabel=ylabel)
        ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
        ax.figure.savefig(
            output, 
            dpi=300, format="png", 
            bbox_inches="tight", pad_inches=0.1)
        plt.close()

    @staticmethod
    def _convert_usage_to_percentage(usage: pd.DataFrame) -> pd.DataFrame:
        """Usage is df that contains columns True and False"""

        total = usage[False] + usage[True]
        result = usage.copy()
        # we only care about apps that use it
        result.drop(columns=[False], inplace=True)
        result[True] = (result[True] / total) * 100
        return result

    @staticmethod
    def _plot_total_usage_percentage_bar_plot(normalized_usage: pd.DataFrame, title: str, output: pathlib.Path, ylabel: str="% of samples"):
        
        df = normalized_usage[normalized_usage["metadata_dex_year"] == "total"]
        SummaryStatsPlotter._bar_plot(df, "maliciousness", True, None, title, output, ylabel=ylabel, xlabel="maliciousness")

    @staticmethod
    def _plot_usage_percentage_time_evolution(normalized_usage: pd.DataFrame, title: str, output: pathlib.Path, ylabel: str="% of samples"):
        
        years_normalized = normalized_usage[normalized_usage["metadata_dex_year"] != "total"]
        SummaryStatsPlotter._evolution_plot(years_normalized, "metadata_dex_year", True, "maliciousness", title, output, ylabel=ylabel)

    def _plot_usage(self, usage: pd.DataFrame, title: str):

        normalized_usage = self._convert_usage_to_percentage(usage)
        # bar plot per maliciousness
        self._plot_total_usage_percentage_bar_plot(normalized_usage, title, os.path.join(self._output_dir, f"{title}_total_barplot.png"))
        # lineplot x is year, y is usage, skusit ako hue maliciousness
        self._plot_usage_percentage_time_evolution(normalized_usage, title, os.path.join(self._output_dir, f"{title}_evolution.png"))

    @staticmethod
    def _convert_records_usage_to_percentage(
        records_usage: pd.DataFrame, 
        imports_usage: pd.DataFrame, 
        maliciousness_for_normalization: Optional[str]=None # when positive then
        ) -> pd.DataFrame:

        def normalize_row(row: pd.Series, normalizator: Dict[Tuple[str, str], int]) -> pd.Series:
            if maliciousness_for_normalization is None:
                maliciousness = row["maliciousness"]
            else:
                maliciousness = maliciousness_for_normalization
            row["n_apks"] = (row["n_apks"] / normalizator[(row["metadata_dex_year"], maliciousness)]) * 100
            return row

        normalizator = {}
        for _, row in imports_usage.iterrows():
            normalizator[(row["metadata_dex_year"], row["maliciousness"])] = row[True] + row[False]
        
        result = records_usage.copy()
        # we only care n_apks here
        result.drop(columns=["n_call_sites", "n_classes"], inplace=True)
        return result.apply(lambda row: normalize_row(row, normalizator), axis="columns")

    @staticmethod
    def _plot_total_records_usage_percentage_bar_plot_by_maliciousness(normalized_usage: pd.DataFrame, title: str, output: pathlib.Path, ylabel: str="% of samples"):
        """Plot for total category and total year barplot for each maliciousness."""

        df = normalized_usage[(normalized_usage["category"] == "total") & (normalized_usage["metadata_dex_year"] == "total")]
        SummaryStatsPlotter._bar_plot(df, "maliciousness", "n_apks", None, title, output, ylabel=ylabel, xlabel="maliciousness")

    @staticmethod
    def _plot_records_usage_percentage_bar_plot_by_category(normalized_usage: pd.DataFrame, title: str, output: pathlib.Path, ylabel: str="% of samples"):
        
        df = normalized_usage[normalized_usage["metadata_dex_year"] == "total"]
        df = df[df["category"] != "total"]
        SummaryStatsPlotter._bar_plot(df, "category", "n_apks", "maliciousness", title, output, ylabel=ylabel, xlabel="category")

    @staticmethod
    def _plot_records_usage_percentage_time_evolution(normalized_usage: pd.DataFrame, title: str, output: pathlib.Path, maliciousness: str, ylabel: str="% of samples"):
        
        df = normalized_usage[(normalized_usage["maliciousness"] == maliciousness) & (normalized_usage["metadata_dex_year"] != "total")]
        df = df[df["category"] != "total"]
        SummaryStatsPlotter._evolution_plot(df, "metadata_dex_year", "n_apks", "category", title, output, ylabel=ylabel)
    
    def _plot_records_usage(self, records_usage: pd.DataFrame, imports_usage: pd.DataFrame, title: str):

        normalized_records_usage = self._convert_records_usage_to_percentage(records_usage, imports_usage)

        # bar plot total per maliciousness
        # (year == total, category == total, x is maliciousness)
        self._plot_total_records_usage_percentage_bar_plot_by_maliciousness(
            normalized_records_usage,
            title, 
            os.path.join(self._output_dir, f"{title}_by_maliciousness_barplot.png")
        )

        # bar plot for each maliciousness for all categories
        # (year == total, x is category, maliciousness is hue)
        self._plot_records_usage_percentage_bar_plot_by_category(
            normalized_records_usage,
            title, 
            os.path.join(self._output_dir, f"{title}_barplot.png"),
        )

        # line plot for each maliciousness for all categories without total category
        # (category != total, category is hue, year is x, one plot per each maliciousness)
        for maliciousness in normalized_records_usage["maliciousness"].unique():
            self._plot_records_usage_percentage_time_evolution(
                normalized_records_usage,
                title, 
                os.path.join(self._output_dir, f"{title}_{maliciousness}_evolution.png"),
                maliciousness
            )
