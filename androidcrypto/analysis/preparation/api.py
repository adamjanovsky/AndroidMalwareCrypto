from typing import Optional, Dict, Tuple, Union

import pandas as pd

from .config import PreparationConfig
from .cleaning import clean_based_on_config
from .records_selection import records_selection_based_on_config
from .feature_engineering import feature_engineering_based_on_config
from .feature_selection import feature_selection_based_on_config

def prepare_based_on_config(
    config: PreparationConfig
    ) -> Optional[Union[
        Dict[str, Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame]], # feature selectiobn/engineering
        Dict[str, Tuple[pd.DataFrame, pd.DataFrame]], # records selection
        pd.DataFrame # cleaning
        ]]:

    # cleaning
    df = None # initialize to None and in case of cleaning set it to result
    if config.cleaning:
        df = clean_based_on_config(config.cleaning)

    # records selection
    task_dfs = None # to be dictionary with task as key and tuple of feature and target
    if config.records_selection:
        task_dfs = records_selection_based_on_config(df, config.records_selection)

    # feature engineering
    task_split_dfs = None # to be dict with task as key and feature and target dataframes split int train/test
    if config.feature_engineering:
        task_split_dfs = feature_engineering_based_on_config(task_dfs, config.feature_engineering)

    # feature selection
    if config.feature_selection:
        task_split_dfs = feature_selection_based_on_config(task_split_dfs, config.feature_selection)
    
    if task_split_dfs is not None:
        return task_split_dfs
    if task_dfs is not None:
        return task_dfs
    return df
