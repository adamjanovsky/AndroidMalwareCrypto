"""
File contains utilities used during preparation.

Author: Dominik Macko
"""

from typing import Union, Any, List, Dict, Tuple, Optional

import numpy as np
import pandas as pd

def list_contains(a: List[Any], b: List[Any]) -> bool:
    """Decided if list a contains any elements from list b."""
    
    for x in b:
        if x in a:
            return True
    return False

def concat_sublists(lists : List[List[Any]]) -> List[Any]:
    """Concats all sublists in a list."""

    result = []
    for sublist in lists:
        result.extend(sublist)
    return result

def create_frequency_dict(array : Union[List[Any], np.array]) -> Dict[Any, int]:
    """Creates dictionary with frequencies of occurence from array."""
    
    result = dict()
    for e in array:
        if e not in result:
            result[e] = 1
        else:
            result[e] += 1
    return result

def get_records_values_series(crypto_api_records : pd.Series) -> pd.Series:
    """Gets all values from crypto_api_records series."""
    
    return pd.Series(crypto_api_records.apply(lambda dic: concat_sublists([*dic.values()])))

def extract_constructors(value_lists : List[List[Union[str, int]]]) -> List[str]:
    """Extracts constructors (index 0) from given value lists."""
    
    return [value_list[0] for value_list in value_lists]

def get_constructor_series(crypto_api_records : pd.Series) -> pd.Series:
    """Gets constructor series from crypto_api_records series."""
    
    return pd.Series(get_records_values_series(crypto_api_records).apply(extract_constructors))

def get_constructor_file_sequences(crypto_api_records: pd.Series) -> pd.Series:
    """Gets series of lists, where each element in given list corresponds to list of construcotrs for given file."""
    
    return pd.Series(
        crypto_api_records.apply(
            lambda dictionary: [extract_constructors(vls) for vls in dictionary.values()]
        )
    )

def get_file_line_index_list(crypto_api_records: Dict[str, List[List[Union[str, int]]]]
                            ) -> List[List[int]]:
    """Returns a list of lists of line indices for each file from given crypto api records dictionary."""
    
    # value lists for each dictionary, so is in format '[[[constructor, line, line index]]]'
    list_of_value_lists = [*crypto_api_records.values()]

    return [[*map(lambda v: v[2], value_list)] for value_list in list_of_value_lists]

def get_file_line_index_list_series(crypto_api_records: pd.Series) -> pd.Series:
    """Returns a series of lists of lists of line indices for each file from given crypto api records series."""
    
    return crypto_api_records.apply(get_file_line_index_list)

def get_file_line_index_frequency_dict(crypto_api_records: Dict[str, List[List[Union[str, int]]]]
                                      ) -> List[Dict[int, int]]:
    """Returns list of line index frequency dictionaries for each file."""
    
    return [*map(create_frequency_dict, get_file_line_index_list(crypto_api_records))]
    
def get_file_line_index_frequency_dict_series(crypto_api_records: pd.Series) -> pd.Series:
    """Returns list of line index frequency dictionaries for each file."""
    
    return crypto_api_records.apply(get_file_line_index_frequency_dict)

def get_line_index_overlap_count(line_index_frequencies: List[Dict[int, int]]) -> int:
    """Returns total line index overlap count."""
    
    return sum([*map(
        lambda d: len([*filter(lambda v: v > 1, d.values())]),
        line_index_frequencies
    )])
    
def get_line_index_overlap_count_series(crypto_api_records: pd.Series) -> pd.Series:
    """Returns count of times when 2 or more constructors appear on the same line."""
    
    return get_file_line_index_frequency_dict_series(crypto_api_records).apply(get_line_index_overlap_count)

def get_max_line_index_overlap_count(line_index_frequencies: List[Dict[int, int]]) -> int:
    """Returns maximum of constructors overlapping on one line index."""
    
    return max([*map(
        lambda d: max([*d.values()], default=0),
        line_index_frequencies
    )], default=0)
    
def get_max_line_index_overlap_count_series(crypto_api_records: pd.Series) -> pd.Series:
    """Returns series with maximum of constructors being on the same line."""
    
    return get_file_line_index_frequency_dict_series(crypto_api_records).apply(get_max_line_index_overlap_count)
