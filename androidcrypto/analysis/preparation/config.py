"""Contains classes and functions for parsing config for preparation.

Author: Dominik Macko
"""

from dataclasses import InitVar, dataclass, field
from typing import List, Dict, Any, Optional
import yaml

@dataclass(frozen=True)
class CleaningLabelsConfig:

    name_rules: Dict[str, str] = field(init=False, default_factory=lambda: dict())
    type_rules: Dict[str, str] = field(init=False, default_factory=lambda: dict())
    names_to_ignore_during_mapping: List[str] = field(init=False, default_factory=lambda: ["UNKNOWN", "BENIGN"])

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)

@dataclass(frozen=True)
class CleaningCryptoAPIConfig:
    remove_when_imports_empty: bool = field(init=False, default=True)
    remove_duplicates: bool = field(init=False, default=True)
    remove_false_positives: bool = field(init=False, default=True)
    calls_to_filter: List[str] = field( # does not get triggered when remove_false_positives is False
        init=False,
        default_factory=lambda: ["Cipher", "PRIVATE_KEY", "SECRET_KEY", "PUBLIC_KEY", "ENCRYPT_MODE"])

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)

@dataclass(frozen=True)
class CleaningConfig:
    input_benign_paths: List[str] = field(init=False, default_factory=lambda: [])
    input_malicious_paths: List[str] = field(init=False, default_factory=lambda: [])
    output_path: Optional[str] = field(init=False, default=None)
    labels_config: Optional[CleaningLabelsConfig] = field(init=False, default=None)
    remove_third_party_crypto_from_packages: bool = field(init=False, default=True)
    remove_similar_records_classes: bool = field(init=False, default=True)
    crypto_api_calls_config: Optional[CleaningCryptoAPIConfig] = field(init=False, default=None)

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            if k == "labels":
                super().__setattr__(f"{k}_config", CleaningLabelsConfig(v))
            elif k == "crypto_api_calls":
                super().__setattr__(f"{k}_config", CleaningCryptoAPIConfig(v))
            else:
                super().__setattr__(k, v)

def parse_cleaning_config(config: Optional[Dict[str, Any]]) -> Optional[CleaningConfig]:

    print("Parsing cleaning config.")
    result = CleaningConfig(config) if config is not None else None
    if not result.input_benign_paths and not result.input_malicious_paths:
        print("Cleaning config does not contain any input paths.")
        return None
    return result

@dataclass(frozen=True)
class MalwareDetectionRecordsSelectionConfig:
    output_features_path: Optional[str] = field(init=False, default=None)
    output_target_path: Optional[str] = field(init=False, default=None)

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)


@dataclass(frozen=True)
class MalwareLabelingRecordsSelectionConfig:
    output_features_path: Optional[str] = field(init=False, default=None)
    output_target_path: Optional[str] = field(init=False, default=None)
    family_count: int = field(init=False, default=10)
    group_rest: bool = field(init=False, default=True)
    families_to_exclude: List[str] = field(init=False, default_factory=lambda: ["UNKNOWN", "BENIGN"])
    
    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)  

@dataclass(frozen=True)
class RecordsSelectionConfig:
    input_path: Optional[str] = field(init=False, default=None)
    malware_detection_config: Optional[MalwareDetectionRecordsSelectionConfig] = field(init=False, default=None)
    malware_labeling_config: Optional[MalwareLabelingRecordsSelectionConfig] = field(init=False, default=None)
    
    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            if k == "malware_detection":
                super().__setattr__(f"{k}_config", MalwareDetectionRecordsSelectionConfig(v))
            elif k == "malware_labeling":
                super().__setattr__(f"{k}_config", MalwareLabelingRecordsSelectionConfig(v))
            else:
                super().__setattr__(k, v)

def parse_records_selection_config(config: Optional[Dict[str, Any]]) -> Optional[RecordsSelectionConfig]:

    print("Parsing records selection config.")
    result = RecordsSelectionConfig(config) if config is not None else None
    if result is not None and result.malware_detection_config is None and result.malware_labeling_config is None:
        print("There is no malware detection and malware labeling config for records selection.")
        return None
    return result

@dataclass(frozen=True)
class FeatureEngineeringTaskConfig:
    input_features_path: Optional[str] = field(init=False, default=None)
    input_target_path: Optional[str] = field(init=False, default=None)
    output_train_features_path: Optional[str] = field(init=False, default=None)
    output_train_target_path: Optional[str] = field(init=False, default=None)
    output_test_features_path: Optional[str] = field(init=False, default=None)
    output_test_target_path: Optional[str] = field(init=False, default=None)

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)

@dataclass(frozen=True)
class FeatureEngineeringConfig:
    train_set_ratio: float = field(init=False, default=0.9)
    min_ngrams: int = field(init=False, default=1)
    max_ngrams: int = field(init=False, default=5)
    strong_hashes: List[str] = field(
        init=False, 
        default_factory=lambda: ["SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512"])
    use_third_party_packages: bool = field(init=False, default=False)
    use_year: bool = field(init=False, default=False)
    use_tfidf: bool = field(init=False, default=False)
    min_document_frequency: float = field(init=False, default=0.005)
    max_document_frequency: float = field(init=False, default=0.995)
    scale_features: bool = field(init=False, default=True)
    task_configs: Dict[str, FeatureEngineeringTaskConfig] = field(init=False, default_factory=lambda: dict())
    
    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            if k == "task_configs":
                for task_name, task_config in v.items():
                    self.task_configs[task_name] = FeatureEngineeringTaskConfig(task_config)
            else:
                super().__setattr__(k, v)

def parse_feature_engineering_config(config: Optional[Dict[str, Any]]) -> Optional[FeatureEngineeringConfig]:

    print("Parsing feature engineering config.")
    result = FeatureEngineeringConfig(config) if config is not None else None
    if result is not None and "malware_detection" not in result.task_configs and "malware_labeling" not in result.task_configs:
        print("There is no malware detection and malware labeling config for feature engineering.")
        return None
    return result

@dataclass(frozen=True)
class FeatureSelectionTaskConfig:
    input_train_features_path: Optional[str] = field(init=False, default=None)
    input_train_target_path: Optional[str] = field(init=False, default=None)
    input_test_features_path: Optional[str] = field(init=False, default=None)
    input_test_target_path: Optional[str] = field(init=False, default=None)
    output_train_features_path: Optional[str] = field(init=False, default=None)
    output_train_target_path: Optional[str] = field(init=False, default=None)
    output_test_features_path: Optional[str] = field(init=False, default=None)
    output_test_target_path: Optional[str] = field(init=False, default=None)

    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            super().__setattr__(k, v)

@dataclass(frozen=True)
class FeatureSelectionConfig:
    max_iterations: int = field(init=False, default=50)
    use_weak_features_boruta: int = field(init=False, default=True)
    n_trees: int = field(init=False, default=200)
    correlation_threshold: float = field(init=False, default=0.95)
    task_configs: Dict[str, FeatureSelectionTaskConfig] = field(init=False, default_factory=lambda: dict())
    
    config: InitVar[Dict[str, Any]]

    def __post_init__(self, config: Dict[str, Any]):
        for k, v in config.items():
            if k == "task_configs":
                for task_name, task_config in v.items():
                    self.task_configs[task_name] = FeatureSelectionTaskConfig(task_config)
            else:
                super().__setattr__(k, v)

def parse_feature_selection_config(config: Optional[Dict[str, Any]]) -> Optional[FeatureSelectionConfig]:

    print("Parsing feature selection config.")
    result = FeatureSelectionConfig(config) if config is not None else None
    if result is not None and "malware_detection" not in result.task_configs and "malware_labeling" not in result.task_configs:
        print("There is no malware detection and malware labeling config for feature selection.")
        return None
    return result

@dataclass(frozen=True)
class PreparationConfig:
    
    cleaning: Optional[CleaningConfig]
    records_selection: Optional[RecordsSelectionConfig]
    feature_engineering: Optional[FeatureEngineeringConfig]
    feature_selection: Optional[FeatureSelectionConfig]

def parse_preparation_config(yaml_config_path: str) -> Optional[PreparationConfig]:

    print("Parsing preparation config.")
    with open(yaml_config_path, "r") as handle:
        config_raw = yaml.safe_load(handle)

    result = PreparationConfig(
        cleaning=parse_cleaning_config(config_raw.get("cleaning", None)),
        records_selection=parse_records_selection_config(config_raw.get("records_selection", None)),
        feature_engineering=parse_feature_engineering_config(config_raw.get("feature_engineering", None)),
        feature_selection=parse_feature_selection_config(config_raw.get("feature_selection", None)),
    )

    # TODO verify if the inputs and sequence makes sense

    return result
