import os
import pickle
import pyjadx
from tqdm import tqdm
from androguard.misc import AnalyzeAPK
from androidcrypto.dataset import Dataset, ParallelDecompiler
from androguard.core.analysis import analysis
from androguard.core.bytecodes.dvm import ClassDefItem
import lzma
from androguard import misc


def main():
    #%%
    """
    dset = Dataset('/Users/adam/phd/projects/CryptoMalware/experiments/decompiling/20191031t094630/Baby dataset')
    print(dset.samples[0])
    next(dset.generator())
    sample = next(dset.generator())

    # %%
    a, d, dx = misc.AnalyzeAPK('/Users/adam/phd/projects/CryptoMalware/datasets/baby_dataset/data/11.apk')
    classes = dx.get_classes()


    for cls in classes:
        cls_item = cls.get_vm_class()
        if isinstance(cls_item, ClassDefItem):
            src = cls_item.source()
    


    with lzma.open('/Users/adam/Downloads/analysis_object.lzma', 'wb') as handle:
        pickle.dump(dx, handle)
    """

    with lzma.open('/Users/adam/Downloads/test/data/11..lzma', 'rb') as handle:
        dx_alt = pickle.load(handle)

    classes = dx_alt.get_classes()
    for cls in classes:
        cls_item = cls.get_vm_class()
        if isinstance(cls_item, ClassDefItem):
            src = cls_item.source()


    """
    dset = Dataset('/Users/adam/phd/projects/CryptoMalware/datasets/baby_dataset')
    decompiler = ParallelDecompiler(dset.samples, dset.root_path, '/Users/adam/Downloads/test', 8)
    decompiler.process_dataset()
    """

if __name__ == '__main__':
    main()





