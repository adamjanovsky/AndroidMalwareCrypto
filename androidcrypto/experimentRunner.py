from androidcrypto.analyzers import base64Task, decompilerTask, stringStatisticsTask
import androidcrypto.constants as constants
from androidcrypto.dataset import Dataset, DatasetException
import yaml
import os
from pathlib import Path
import logging


class ExperimentConfig:
    """
    This class should carry all information parsed from the yaml configuration files.
    Moreover, it should be accessible as a whole to the Task instances. At the same time
    it should not carry any information specific to the tasks, nor it should describe the state of the task.
    """
    def __init__(self, exp_name, neptune_api_token, neptune_project_name, datasets, output_path, is_being_logged, input_path, logger, logging_path, config_path, n_threads):
        self.experiment_name = exp_name
        self.neptune_api_token = neptune_api_token
        self.neptune_project_name = neptune_project_name
        self.logger = logger
        self.is_being_logged = is_being_logged

        self.datasets = datasets
        self.output_path = output_path
        self.input_path = input_path

        self.logging_path = logging_path
        self.config_path = config_path

        self.n_threads = n_threads


class ExperimentRunner:
    """
    Class responsible for parsing the Experiment configuration files into ExperimentConfig instance.
    After parsing, the Tasks are called and evaluated.
    If conflicts emerge, individual ExperimentConfig can be setup for each of tasks (at the moment we support calling only one task)
    """
    def __init__(self, config_path, neptune_token):
        self.config_path = config_path
        self.config_stream = None
        self.neptune_token = neptune_token
        self.experiment_config = None
        self.logger = None

    def parse_config_file(self):
        """
        Parses the yaml configuration file of the experiment.
        :return:
        """
        with open(self.config_path) as stream:
            self.config_stream = yaml.load(stream, Loader=yaml.FullLoader)

            is_being_logged = self.neptune_token is not None and self.config_stream['is_being_logged'] is True
            output_path = Path(self.config_stream['output_path'])
            neptune_project_name = None

            logging_path = os.path.join(output_path, constants.LOGS_FILENAME)
            logging.basicConfig(filename=logging_path, level=logging.INFO, filemode='w',
                                format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s')
            self.logger = logging.getLogger()
            self.logger.info(f'Parsing the config file.')

            if is_being_logged:
                neptune_project_name = self.config_stream['neptune_project_name']

            input_path = Path(self.config_stream['input_path'])
            dataset_paths = self.config_stream['dataset_paths']
            n_threads = self.config_stream['n_threads']
            try:
                datasets = [Dataset(p) for p in dataset_paths]
            except DatasetException as e:
                self.logger.info(f'Missing dataset meta: {e}')
                raise DatasetException
                # TODO: If terminating here, log.txt is created in root path.

            self.experiment_config = ExperimentConfig(self.config_stream['experiment_name'],
                                                      self.neptune_token,
                                                      neptune_project_name,
                                                      datasets,
                                                      output_path,
                                                      is_being_logged,
                                                      input_path,
                                                      self.logger,
                                                      logging_path,
                                                      self.config_path,
                                                      n_threads)

    def run(self):
        """
        Just runs the tasks
        :return: Nothing
        """
        # TODO: Simplified version employed right now. We're good to run multiple experiments from one binary, restricted
        # to one experiment at the moment though.
        try:
            self.parse_config_file()
        except DatasetException:
            self.logger.info('Ending due to Dataset exception.')
            return
        tasks_to_run = 0

        for t in self.config_stream['tasks']:
            if t == 'deobfuscate':
                logging.info(f'Starting base64 deobfuscation task.')
                task = base64Task.DeobfuscateBase64(self.experiment_config)
                tasks_to_run += 1

            elif t == 'word_stats':
                logging.info(f'Starting keyword_statistics task.')
                task = stringStatisticsTask.ComputeStringStatistics(self.experiment_config)
                tasks_to_run += 1
            elif t == 'decompile':
                logging.info(f'Starting decompiling task.')
                task = decompilerTask.TransformDatasets(self.experiment_config)
                tasks_to_run += 1

        if tasks_to_run > 0:
            task.run()
