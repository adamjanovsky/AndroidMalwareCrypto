from androidcrypto.analyzers.task import Task
import androidcrypto.helpers as helpers
import androidcrypto.constants as constants
import base64


class DeobfuscateBase64(Task):
    """
    Task to extract, decode and upload all Base64 encoded strings from the java source-code obtained from decompiled apks.
    Follows the general structure, no comments present.
    """
    def __init__(self, experiment_config):
        super().__init__(experiment_config)

    def init_neptune(self):
        super().init_neptune()
        if self.cfg.is_being_logged is True:
            self.experiment.append_tag('base64')

    def run_on_dataset(self, dset):
        self.cfg.logger.info(f'Analyzing base64 in {dset.name} dataset.')
        if dset.format != 'lzma':
            self.cfg.logger.info('Failed to Deobfuscate base64 strings in dataset, need lzma Analysis files, got apk format.')
            return

        results_filepath = helpers.establish_results_filepath(self.cfg.output_path, constants.BASE64_EXP_RESULTS_FILENAME + '_' + dset.name, 'txt')

        with open(results_filepath, 'w') as handle:
            counter = 0
            n_total_strings = 0
            for anobj in dset.generator():
                base64_strings = self.worker(anobj)
                if len(base64_strings) > 0:
                    counter += 1
                    n_total_strings += len(base64_strings)

                    # TODO: Learn to get analysis object filename in a line below
                    handle.write(f'filename\n')
                    for s in base64_strings:
                        handle.write(f'\t{s}\n')
            handle.write(f'In total, {n_total_strings} Base64 strings were found in {counter} distinct files.')

    def worker(self, anobj):
        classes = anobj.get_classes()
        base64_strings = []

        for cls in classes:
            src_class = helpers.extract_class_source_code(cls)
            if src_class is None:
                return base64_strings
            for line in src_class.split('\n'):
                if 'Base64' in line:
                    res = self.decode_base64_line_of_code(line)
                    if res is not None:
                        base64_strings.append(res)
        return base64_strings

    @staticmethod
    def decode_base64_line_of_code(line_of_code):
        splt = line_of_code.split('Base64.decode("')
        if len(splt) > 1:
            return base64.decodebytes(str.encode(splt[1].split('\"')[0]))
        else:
            return None
