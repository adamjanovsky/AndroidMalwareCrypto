import os

import androidcrypto.helpers as helpers
import androidcrypto.constants as constants
import json
import lzma
import pickle


class Sample:
    # slots experiment. Decreases size of object from 4000 bytes to 150 bytes, may be worth it. The measurement may be fake, should check RAM consumption
    __slots__ = ('sha256', 'androzoo_url', 'dex_year', 'dx_path', 'apk_path', 'literadar_tmp_path', 'third_party_packages', 'third_party_crypto_libs',
                 'crypto_api_records', 'native_imports', 'euphony_name', 'euphony_type', 'crypto_imports')

    # 1. Init from apk file: Only path to apk is known, rest is computed
    # 2. Init from androzoo: Androzoo url, dex_date and sha256 are known
    # 3. Init from dictionary: all elements are known

    # TODO: Try to init the object and compute its size in memory, try if it scales e.g. to 500k objects
    def __init__(self, sha256, androzoo_url, dex_year):
        self.sha256 = sha256.lower()
        self.androzoo_url = androzoo_url
        self.dex_year = dex_year

        self.dx_path = None
        self.apk_path = None
        self.literadar_tmp_path = None

        self.third_party_packages = None
        self.third_party_crypto_libs = None
        self.crypto_api_records = None
        self.native_imports = None

        self.euphony_name = None
        self.euphony_type = None
        self.crypto_imports = None

    def __repr__(self):
        return str(self.to_dict())

    def to_dict(self):
        dct = dict()
        dct['metadata'] = {'apk_path': self.apk_path, 'dx_path': self.dx_path, 'dex_year': self.dex_year, 'euphony_name': self.euphony_name, 'euphony_type': self.euphony_type}
        dct['third_party_crypto_libs'] = self.third_party_crypto_libs
        dct['third_party_packages'] = self.third_party_packages
        dct['crypto_imports'] = self.crypto_imports
        dct['crypto_api_records'] = self.crypto_api_records
        dct['native_imports'] = self.native_imports
        return dct

    @classmethod
    def from_dict(cls, sha256, dct):
        androzoo_url = dct['metadata'].get('androzoo_url', None)
        dex_year = dct['metadata'].get('dex_year', None)
        sample = cls(sha256, androzoo_url, dex_year)

        sample.apk_path = dct['metadata'].get('apk_path', None)
        sample.dx_path = dct['metadata'].get('dx_path', None)
        sample.euphony_name = dct['metadata'].get('euphony_name', None)
        sample.euphony_type = dct['metadata'].get('euphony_type', None)

        sample.third_party_packages = dct.get('third_party_packages', [])
        sample.crypto_api_records = dct.get('crypto_api_records', {})
        sample.third_party_crypto_libs = dct.get('third_party_crypto_libs', [])
        sample.crypto_imports = dct.get('crypto_imports', [])
        sample.native_imports = dct.get('native_imports', [])

        return sample

    @classmethod
    def from_apk(cls, apk_path):
        try:
            sha256 = helpers.hash_file(apk_path)
        except OSError:
            raise constants.DatasetException
        obj = cls(sha256, None, None)
        obj.apk_path = apk_path
        return obj

    def delete_apk(self):
        try:
            os.remove(self.apk_path)
            self.apk_path = None
        except OSError:
            pass

    def delete_dx(self):
        try:
            os.remove(self.dx_path)
            self.dx_path = None
        except OSError:
            pass

    def delete_literadar_tmp(self):
        try:
            os.remove(self.literadar_tmp_path)
            self.literadar_tmp_path = None
        except OSError:
            pass

    def to_json(self):
        pass

    def dump_dx_to_file(self, dx_object):
        with lzma.open(self.dx_path, 'wb') as handle:
            pickle.dump(dx_object, handle)

    def load_dx_from_file(self):
        with lzma.open(self.dx_path, 'rb') as handle:
            dx_object = pickle.load(handle)
        return dx_object

    def delete_auxillary_files(self, delete_apk, delete_dx, delete_literadar_tmp):
        if delete_apk is True:
            self.delete_apk()
        if delete_dx is True:
            self.delete_dx()
        if delete_literadar_tmp is True:
            self.delete_literadar_tmp()

