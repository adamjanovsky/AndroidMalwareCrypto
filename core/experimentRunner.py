import core.helpers as helpers
import core.analyzer as analyzer
import core.constants as constants
from core.dataset import Dataset
import pyjadx
import yaml
import os
from pathlib import Path
import logging


class ExperimentConfig:
    def __init__(self):
        self.experiment_name = None


class ExperimentRunner:
    def __init__(self, config_path, neptune_token):
        self.config_path = config_path
        self.neptune_token = neptune_token
        self.neptune_project_name = None

        self.experiment_name = None
        self.input_path = None
        self.dataset_paths = []
        self.output_path = None
        self.datasets = None

        self.is_being_logged = True

    def run(self):
        with open(self.config_path) as stream:
            config = yaml.load(stream, Loader=yaml.FullLoader)

            self.is_being_logged = self.neptune_token is not None
            self.output_path = Path(config['output_path'])

            if self.is_being_logged:
                logging.basicConfig(filename=os.path.join(self.output_path, constants.LOGS_FILENAME), level=logging.DEBUG, filemode='w',
                                    format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s')
                logging.info(f'Parsing the config file.')
                self.neptune_project_name = config['neptune_project_name']

            self.input_path = Path(config['input_path'])

            self.dataset_paths = config['dataset_paths']
            self.datasets = [Dataset(p) for p in self.dataset_paths]

            for task in config['task']:
                if task == 'deobfuscate':
                    logging.info(f'Starting base64 deobfuscation task.')

                    self.decode_base64(self.datasets, self.output_path, self.neptune_token, self.neptune_project_name)

                elif task == 'word_stats':
                    logging.info(f'Starting keyword_statistics task.')
                    self.compute_word_statistics(self.input_path, self.output_path, config['word_stats']['words'], False)



    @staticmethod
    def compute_word_statistics(dir_to_search, output_path, words, count_imports=True):
        jadx = pyjadx.Jadx()
        apks_to_search = helpers.find_all_files_with_extension(dir_to_search, 'apk')

        task = analyzer.ComputeStringStatistics(jadx, apks_to_search, output_path, words, count_imports)
        task.run()

    @staticmethod
    def decode_base64(datasets, output_path, neptune_token=None, neptune_project_name=None):
        jadx = pyjadx.Jadx()
        task = analyzer.DeobfuscateBase64(jadx, datasets, output_path, neptune_token, neptune_project_name)
        task.run()
