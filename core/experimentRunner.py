import core.helpers as helpers
import core.analyzer as analyzer
import pyjadx
import yaml
import os
from pathlib import Path


class ExperimentRunner:
    def __init__(self, config_path, neptune_token):
        self.config_path = config_path
        self.neptune_token = neptune_token

        self.experiment_name = None
        self.input_path = None
        self.output_path = None

    def run(self):
        with open(self.config_path) as stream:
            config = yaml.load(stream, Loader=yaml.FullLoader)

            self.input_path = Path(config['input_path'])
            self.output_path = Path(config['output_path'])

            for task in config['task']:
                if task == 'deobfuscate':
                    self.decode_bas64(self.input_path, self.output_path)

                elif task == 'word_stats':
                    self.compute_word_statistics(self.input_path, self.output_path, config['word_stats']['words'], False)




    @staticmethod
    def compute_word_statistics(dir_to_search, output_path, words, count_imports=True):
        jadx = pyjadx.Jadx()
        apks_to_search = helpers.find_all_files_with_extension(dir_to_search, 'apk')

        task = analyzer.ComputeStringStatistics(jadx, apks_to_search, output_path, words, count_imports)
        task.run()

    @staticmethod
    def decode_bas64(dir_to_search, output_path):
        jadx = pyjadx.Jadx()
        apks_to_search = helpers.find_all_files_with_extension(dir_to_search, 'apk')

        task = analyzer.DeobfuscateBase64(jadx, apks_to_search, output_path)
        task.run()
