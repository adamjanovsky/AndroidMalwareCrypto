import core.helpers as helpers
import core.analyzer as analyzer
import core.constants as constants
from core.dataset import Dataset
import yaml
import os
from pathlib import Path
import logging


class ExperimentConfig:
    def __init__(self, exp_name, neptune_token, neptune_project_name, datasets, output_path, is_being_logged, input_path):
        self.experiment_name = exp_name
        self.neptune_token = neptune_token
        self.neptune_project_name = neptune_project_name
        self.datasets = datasets
        self.output_path = output_path
        self.is_being_logged = is_being_logged
        self.input_path = input_path


class ExperimentRunner:
    """
    If conflicts emerge, individual ExperimentConfig can be setup for each of tasks.
    """
    def __init__(self, config_path, neptune_token):
        self.config_path = config_path
        self.config = None
        self.neptune_token = neptune_token

        self.experiment_config = None

    def parse_config_file(self):
        with open(self.config_path) as stream:
            self.config = yaml.load(stream, Loader=yaml.FullLoader)

            is_being_logged = self.neptune_token is not None
            output_path = Path(self.config['output_path'])
            neptune_project_name = None

            if is_being_logged:
                logging.basicConfig(filename=os.path.join(output_path, constants.LOGS_FILENAME), level=logging.DEBUG, filemode='w',
                                    format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s')
                logging.info(f'Parsing the config file.')
                neptune_project_name = self.config['neptune_project_name']

            input_path = Path(self.config['input_path'])
            dataset_paths = self.config['dataset_paths']
            datasets = [Dataset(p) for p in dataset_paths]

            self.config = ExperimentConfig(self.config['experiment_name'],
                                           self.neptune_token,
                                           neptune_project_name,
                                           datasets,
                                           output_path,
                                           is_being_logged,
                                           input_path)

    def run(self):
        self.parse_config_file()

        for t in self.config['tasks']:
            if t == 'deobfuscate':
                logging.info(f'Starting base64 deobfuscation task.')
                task = analyzer.DeobfuscateBase64(self.experiment_config)

            elif t == 'word_stats':
                logging.info(f'Starting keyword_statistics task.')
                task = analyzer.ComputeStringStatistics(self.experiment_config)
            task.run()
