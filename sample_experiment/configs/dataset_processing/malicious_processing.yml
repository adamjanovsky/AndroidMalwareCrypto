# List of tasks to perform: 'download', 'decompile', 'third_party_libs', 'evaluate', 'label'
tasks:
  - "decompile"
  - "third_party_libs"
  - "evaluate"

is_being_logged: True # whether to log into Neptune.ai or not
n_threads: 4 # how many threads to use
neptune_project_name: "TeamName/ProjectName" # Name of project in the Neptune.ai. 
experiment_name: "ExperimentName" # Name of experiment for the Neptune.ai
dataset_path: "data/malicious_dataset" # path to your dataset
timeout: 900 # Number of seconds to timeout, 900 is default
delete_corrupted: False # Whether the samples that fail should be deleted as a whole, i.e. including apks, True is default

third_party_libs:
  literadar_path: "/var/tmp/xmacko1/bachelor_thesis/repos/LiteRadar/LiteRadar/literadar.py"
  crypto_libs:
    - "Lorg/whispersystems/curve25519"
    - "Linfo/guardianproject/netcipher/"
    - "Lorg/springframework/security/crypto"
    - "Lgnu/crypto/"
    - "Lorg/apache/shiro/crypto"
    - "Lcom/rsa/crypto/"
    - "org/keyczar"
    - "Lorg/jasypt/"
    - "Lcom/googlecode/gwt/crypto"
    - "sqlcipher"
    - - "Lorg/spongycastle"
      - "crypto"
    - - "bouncycastle "
      - "crypt"
    - - "Lcom/facebook"
      - "crypt"

decompile:
  delete_dxs: True # If we should delete the DX files after experiment or not.
  jadx_path: "jadx" # Specify the full path to your jadx binary decompiler, or just write 'jadx' if you have it in your path.

# The configuration below specifies what cryptographic API will get analyzed, keep it like it is unless you plan to do crazy stuff.
evaluate:
  imports:
    - "javax.crypto.Cipher"
    - "javax.crypto.CipherInputStream"
    - "javax.crypto.CipherSpi"
    - "javax.crypto.EncryptedPrivateKeyInfo"
    - "javax.crypto.ExemptionMechanism"
    - "javax.crypto.ExemptionMechanismSpi"
    - "javax.crypto.KeyAgreement"
    - "javax.crypto.KeyAgreementSpi"
    - "javax.crypto.KeyGenerator"
    - "javax.crypto.KeyGeneratorSpi"
    - "javax.crypto.Mac"
    - "javax.crypto.MacSpi"
    - "javax.crypto.NullCipher"
    - "javax.crypto.SealedObject"
    - "javax.crypto.SecretKeyFactory"
    - "javax.crypto.SecretKey"
    - "javax.crypto.SecretKeyFactorySpi"
    - "javax.crypto.interfaces.DHKey"
    - "javax.crypto.interfaces.DHPrivateKey"
    - "javax.crypto.interfaces.DHPublicKey"
    - "javax.crypto.interfaces.PBEKey"
    - "javax.crypto.spec.DESedeKeySpec"
    - "javax.crypto.spec.DESKeySpec"
    - "javax.crypto.spec.DHGenParameterSpec"
    - "javax.crypto.spec.DHParameterSpec"
    - "javax.crypto.spec.DHPrivateKeySpec"
    - "javax.crypto.spec.DHPublicKeySpec"
    - "javax.crypto.spec.GCMParameterSpec"
    - "javax.crypto.spec.IvParameterSpec"
    - "javax.crypto.spec.OAEPParameterSpec"
    - "javax.crypto.spec.PBEKeySpec"
    - "javax.crypto.spec.PBEParameterSpec"
    - "javax.crypto.spec.PSource"
    - "javax.crypto.spec.PSource.PSpecified"
    - "javax.crypto.spec.RC2ParameterSpec"
    - "javax.crypto.spec.RC5ParameterSpec"
    - "javax.crypto.spec.SecretKeySpec"
    - "java.security.PublicKey"
    - "java.security.PrivateKey"
    - "java.security.Key"
    - "java.security.AlgorithmParameterGenerator"
    - "java.security.AlgorithmParameters"
    - "java.security.DigestInputStream"
    - "java.security.DigestOutputStream"
    - "java.security.KeyFactory"
    - "java.security.KeyPair"
    - "java.security.KeyPairGenerator"
    - "java.security.MessageDigest"
    - "java.security.SecureRandom"
    - "java.security.Signature"
    - "java.security.SignedObject"
    - "java.security.interfaces.DSAKey"
    - "java.security.interfaces.DSAKeyPairGenerator"
    - "java.security.interfaces.DSAParams"
    - "java.security.interfaces.DSAPrivateKey"
    - "java.security.interfaces.DSAPublicKey"
    - "java.security.interfaces.ECKey"
    - "java.security.interfaces.ECPrivateKey"
    - "java.security.interfaces.ECPublicKey"
    - "java.security.interfaces.RSAKey"
    - "java.security.interfaces.RSAMultiPrimePrivateCrtKey"
    - "java.security.interfaces.RSAPrivateCrtKey"
    - "java.security.interfaces.RSAPrivateKey"
    - "java.security.interfaces.RSAPublicKey"
    - "java.security.spec.DSAParameterSpec"
    - "java.security.spec.DSAPrivateKeySpec"
    - "java.security.spec.DSAPublicKeySpec"
    - "java.security.spec.ECFieldF2m"
    - "java.security.spec.ECFieldFp"
    - "java.security.spec.ECGenParameterSpec"
    - "java.security.spec.ECParameterSpec"
    - "java.security.spec.ECPoint"
    - "java.security.spec.ECPrivateKeySpec"
    - "java.security.spec.ECPublicKeySpec"
    - "java.security.spec.EllipticCurve"
    - "java.security.spec.EncodedKeySpec"
    - "java.security.spec.MGF1ParameterSpec"
    - "java.security.spec.PKCS8EncodedKeySpec"
    - "java.security.spec.PSSParameterSpec"
    - "java.security.spec.RSAKeyGenParameterSpec"
    - "java.security.spec.RSAMultiPrimePrivateCrtKeySpec"
    - "java.security.spec.RSAOtherPrimeInfo"
    - "java.security.spec.RSAPrivateCrtKeySpec"
    - "java.security.spec.RSAPrivateKeySpec"
    - "java.security.spec.RSAPublicKeySpec"
    - "java.security.spec.X509EncodedKeySpec"

  native_imports:
    - "crypto-algorithms"
    - "libgcrypt"
    - "monocypher"
    - "PolarSSL"
    - "tint-AES-C"
    - "xxHash"
    - "libsodium"
    - "openssl"
    - "libressl"
    - "wolfssl"

  categories: # Basically just a list of strings for which we should search in the decompiled apk.
    ECGenParameterSpec:
      - "ECGenParameterSpec("
    ECFieldF2m:
      - "ECFieldF2m("
      - "getM()"
    ECParameterSpec:
      - "ECParameterSpec("
    DSAPublicKeySpec:
      - "DSAPublicKeySpec"
    RSAPublicKeySpec:
      - "RSAPublicKeySpec("
    DSAPrivateKeySpec:
      - "DSAPrivateKeySpec"
    ECFieldP:
      - "ECFieldFp("
      - "getP()"
    ECPrivateKeySpec:
      - "ECPrivateKeySpec("
      - "getS()"
    DSAKeyPairGenerator:
      - "DSAKeyPairGenerator.initialize("
    java_security_interfaces_summarized:
      - "getPrivateExponent()"
      - "getS()"
    javax_crypto_spec_together:
      - "SecretKeySpec("
      - "PBEParameterSpec("
      - "RC5ParameterSpec("
      - "RC2ParameterSpec("
      - "OAEPParameterSpec("
      - "PBEKeySpec("
      - "IvParameterSpec("
      - "GCMParameterSpec("
      - "DHPublicKeySpec("
      - "DHPrivateKeySpec("
      - "DHParameterSpec("
      - "DHGenParameterSpec("
    AlgorithmParameterGenerator:
      - "AlgorithmParameterGenerator.getInstance("
      - 'AlgorithmParameterGenerator.getInstance("DiffieHellman'
      - 'AlgorithmParameterGenerator.getInstance("DSA'
    MessageDigest:
      - "MessageDigest.getInstance("
      - 'MessageDigest.getInstance("MD2'
      - 'MessageDigest.getInstance("MD5'
      - 'MessageDigest.getInstance("SHA-1'
      - 'MessageDigest.getInstance("SHA-224'
      - 'MessageDigest.getInstance("SHA-256'
      - 'MessageDigest.getInstance("SHA-384'
      - 'MessageDigest.getInstance("SHA-512'
      - 'MessageDigest.getInstance("SHA-512/224'
      - 'MessageDigest.getInstance("SHA-512/256'
    KeyPairGenerator:
      - "KeyPairGenerator.initialize("
      - "KeyPairGenerator.getInstance("
      - 'KeyPairGenerator.getInstance("DH'
      - 'KeyPairGenerator.getInstance("DiffieHellman'
      - 'KeyPairGenerator.getInstance("DSA'
      - 'KeyPairGenerator.getInstance("EC'
      - 'KeyPairGenerator.getInstance("RSA'
    DigestOutputStream:
      - "DigestOutputStream("
    AlgorithmParameters:
      - "AlgorithmParameters.getInstance("
      - 'AlgorithmParameters.getInstance("AES'
      - 'AlgorithmParameters.getInstance("BLOWFISH'
      - 'AlgorithmParameters.getInstance("ChaCha20'
      - 'AlgorithmParameters.getInstance("DES'
      - 'AlgorithmParameters.getInstance("DESede'
      - 'AlgorithmParameters.getInstance("DH'
      - 'AlgorithmParameters.getInstance("DSA'
      - 'AlgorithmParameters.getInstance("EC'
      - 'AlgorithmParameters.getInstance("GCM'
      - 'AlgorithmParameters.getInstance("IES'
      - 'AlgorithmParameters.getInstance("OAEP'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA1AndAES_128'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA1AndAES_256'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA224AndAES_128'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA224AndAES_256'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA256AndAES_128'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA256AndAES_256'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA384AndAES_128'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA384AndAES_256'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA512AndAES_128'
      - 'AlgorithmParameters.getInstance("PBEwithHmacSHA512AndAES_256'
      - 'AlgorithmParameters.getInstance("PKCS12PBE'
      - 'AlgorithmParameters.getInstance("PSS'
    SecureRandom:
      - "SecureRandom("
      - "setSeed("
      - "SecureRandom.getInstance("
      - 'SecureRandom.getInstance("NativePRNG'
      - 'SecureRandom.getInstance("NativePRNGBlocking'
      - 'SecureRandom.getInstance("NativePRNGNonBlocking'
      - 'SecureRandom.getInstance("PKCS11'
      - 'SecureRandom.getInstance("SHA1PRNG'
      - 'SecureRandom.getInstance("Windows-PRNG'
    DigestInputStream:
      - "DigestInputStream("
    Signature:
      - "Signature.getInstance("
      - 'Signature.getInstance("DSA'
      - 'Signature.getInstance("DSAwithSHA1'
      - 'Signature.getInstance("DSS'
      - 'Signature.getInstance("ECDSA'
      - 'Signature.getInstance("ECDSAwithSHA1'
      - 'Signature.getInstance("MD2withRSA'
      - 'Signature.getInstance("MD4withRSA'
      - 'Signature.getInstance("MD5withRSA'
      - 'Signature.getInstance("MD5withRSA/ISO9796-2'
      - 'Signature.getInstance("NONEwithDSA'
      - 'Signature.getInstance("NONEwithECDSA'
      - 'Signature.getInstance("NONEwithRSA'
      - 'Signature.getInstance("RSASSA-PSS'
      - 'Signature.getInstance("SHA1withDSA'
      - 'Signature.getInstance("SHA1withECDSA'
      - 'Signature.getInstance("SHA1withRSA'
      - 'Signature.getInstance("SHA1withRSA/ISO9796-2'
      - 'Signature.getInstance("SHA1withRSA/PSS'
      - 'Signature.getInstance("SHA224withDSA'
      - 'Signature.getInstance("SHA224withECDSA'
      - 'Signature.getInstance("SHA224withRSA'
      - 'Signature.getInstance("SHA224withRSA/PSS'
      - 'Signature.getInstance("SHA256withDSA'
      - 'Signature.getInstance("SHA256withECDSA'
      - 'Signature.getInstance("SHA256withRSA'
      - 'Signature.getInstance("SHA256withRSA/PSS'
      - 'Signature.getInstance("SHA384withECDSA'
      - 'Signature.getInstance("SHA384withRSA'
      - 'Signature.getInstance("SHA384withRSA/PSS'
      - 'Signature.getInstance("SHA512withECDSA'
      - 'Signature.getInstance("SHA512withRSA'
      - 'Signature.getInstance("SHA512withRSA/PSS'
    KeyFactory:
      - "KeyFactory.getInstance("
      - 'KeyFactory.getInstance("DiffieHellman'
      - 'KeyFactory.getInstance("DSA'
      - 'KeyFactory.getInstance("RSA'
      - 'KeyFactory.getInstance("RSASSA-PSS'
      - 'KeyFactory.getInstance("EC'
    KeyPair:
      - "KeyPair("
    ExemptionMechanism:
      - "ExemptionMechanism"
    KeyGenerator:
      - "KeyGenerator.getInstance("
      - "generateKey("
      - 'KeyGenerator.getInstance("AES'
      - 'KeyGenerator.getInstance("AESWRAP'
      - 'KeyGenerator.getInstance("ARC4'
      - 'KeyGenerator.getInstance("BLOWFISH'
      - 'KeyGenerator.getInstance("ChaCha20'
      - 'KeyGenerator.getInstance("DES'
      - 'KeyGenerator.getInstance("DESede'
      - 'KeyGenerator.getInstance("DESedeWRAP'
      - 'KeyGenerator.getInstance("HmacMD5'
      - 'KeyGenerator.getInstance("HmacSHA1'
      - 'KeyGenerator.getInstance("HmacSHA224'
      - 'KeyGenerator.getInstance("HmacSHA256'
      - 'KeyGenerator.getInstance("HmacSHA384'
      - 'KeyGenerator.getInstance("HmacSHA512'
      - 'KeyGenerator.getInstance("RC4'
    EncryptedPrivateKeyInfo:
      - "EncryptedPrivateKeyInfo"
      - "PKCS8EncodedKeySpec"
    KeyAgreement:
      - "KeyAgreement.getInstance("
      - "generateSecret("
      - 'KeyAgreement.getInstance("DiffieHellman'
      - 'KeyAgreement.getInstance("ECDH'
      - 'KeyAgreement.getInstance("ECMQV'
    Cipher:
      - "Cipher.getInstance("
      - "Cipher"
      - "DECRYPT_MODE"
      - "ENCRYPT_MODE"
      - "PRIVATE_KEY"
      - "PUBLIC_KEY"
      - "SECRET_KEY"
      - 'Cipher.getInstance("AES'
      - 'Cipher.getInstance("AES/CBC/ISO10126Padding'
      - 'Cipher.getInstance("AES/CBC/NoPadding'
      - 'Cipher.getInstance("AES/CBC/PKCS5Padding'
      - 'Cipher.getInstance("AES/CFB/ISO10126Padding'
      - 'Cipher.getInstance("AES/CFB/NoPadding'
      - 'Cipher.getInstance("AES/CFB/PKCS5Padding'
      - 'Cipher.getInstance("AES/CTR/ISO10126Padding'
      - 'Cipher.getInstance("AES/CTR/NoPadding'
      - 'Cipher.getInstance("AES/CTR/PKCS5Padding'
      - 'Cipher.getInstance("AES/CTS/ISO10126Padding'
      - 'Cipher.getInstance("AES/CTS/NoPadding'
      - 'Cipher.getInstance("AES/CTS/PKCS5Padding'
      - 'Cipher.getInstance("AES/ECB/ISO10126Padding'
      - 'Cipher.getInstance("AES/ECB/NoPadding'
      - 'Cipher.getInstance("AES/ECB/PKCS5Padding'
      - 'Cipher.getInstance("AES/OFB/ISO10126Padding'
      - 'Cipher.getInstance("AES/OFB/NoPadding'
      - 'Cipher.getInstance("AES/OFB/PKCS5Padding'
      - 'Cipher.getInstance("AES/GCM/NoPadding'
      - 'Cipher.getInstance("AES_128'
      - 'Cipher.getInstance("AES_128/CBC/NoPadding'
      - 'Cipher.getInstance("AES_128/CBC/PKCS5Padding'
      - 'Cipher.getInstance("AES_128/ECB/NoPadding'
      - 'Cipher.getInstance("AES_128/ECB/PKCS5Padding'
      - 'Cipher.getInstance("AES_128/GCM/NoPadding'
      - 'Cipher.getInstance("AES_256'
      - 'Cipher.getInstance("AES_256/CBC/NoPadding'
      - 'Cipher.getInstance("AES_256/CBC/PKCS5Padding'
      - 'Cipher.getInstance("AES_256/ECB/NoPadding'
      - 'Cipher.getInstance("AES_256/ECB/PKCS5Padding'
      - 'Cipher.getInstance("AES_256/GCM/NoPadding'
      - 'Cipher.getInstance("ARC4'
      - 'Cipher.getInstance("ARC4/ECB/NoPadding'
      - 'Cipher.getInstance("ARC4/NONE/NoPadding'
      - 'Cipher.getInstance("BLOWFISH'
      - 'Cipher.getInstance("BLOWFISH/CBC/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/CBC/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/CBC/PKCS5Padding'
      - 'Cipher.getInstance("BLOWFISH/CFB/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/CFB/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/CFB/PKCS5Padding'
      - 'Cipher.getInstance("BLOWFISH/CTR/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/CTR/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/CTR/PKCS5Padding'
      - 'Cipher.getInstance("BLOWFISH/CTS/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/CTS/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/CTS/PKCS5Padding'
      - 'Cipher.getInstance("BLOWFISH/ECB/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/ECB/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/ECB/PKCS5Padding'
      - 'Cipher.getInstance("BLOWFISH/OFB/ISO10126Padding'
      - 'Cipher.getInstance("BLOWFISH/OFB/NoPadding'
      - 'Cipher.getInstance("BLOWFISH/OFB/PKCS5Padding'
      - 'Cipher.getInstance("ChaCha20'
      - 'Cipher.getInstance("ChaCha20/NONE/NoPadding'
      - 'Cipher.getInstance("ChaCha20/Poly1305/NoPadding'
      - 'Cipher.getInstance("DES'
      - 'Cipher.getInstance("DES/CBC/ISO10126Padding'
      - 'Cipher.getInstance("DES/CBC/NoPadding'
      - 'Cipher.getInstance("DES/CBC/PKCS5Padding'
      - 'Cipher.getInstance("DES/CFB/ISO10126Padding'
      - 'Cipher.getInstance("DES/CFB/NoPadding'
      - 'Cipher.getInstance("DES/CFB/PKCS5Padding'
      - 'Cipher.getInstance("DES/CTR/ISO10126Padding'
      - 'Cipher.getInstance("DES/CTR/NoPadding'
      - 'Cipher.getInstance("DES/CTR/PKCS5Padding'
      - 'Cipher.getInstance("DES/CTS/ISO10126Padding'
      - 'Cipher.getInstance("DES/CTS/NoPadding'
      - 'Cipher.getInstance("DES/CTS/PKCS5Padding'
      - 'Cipher.getInstance("DES/ECB/ISO10126Padding'
      - 'Cipher.getInstance("DES/ECB/NoPadding'
      - 'Cipher.getInstance("DES/ECB/PKCS5Padding'
      - 'Cipher.getInstance("DES/OFB/ISO10126Padding'
      - 'Cipher.getInstance("DES/OFB/NoPadding'
      - 'Cipher.getInstance("DES/OFB/PKCS5Padding'
      - 'Cipher.getInstance("DESede'
      - 'Cipher.getInstance("DESede/CBC/ISO10126Padding'
      - 'Cipher.getInstance("DESede/CBC/NoPadding'
      - 'Cipher.getInstance("DESede/CBC/PKCS5Padding'
      - 'Cipher.getInstance("DESede/CFB/ISO10126Padding'
      - 'Cipher.getInstance("DESede/CFB/NoPadding'
      - 'Cipher.getInstance("DESede/CFB/PKCS5Padding'
      - 'Cipher.getInstance("DESede/CTR/ISO10126Padding'
      - 'Cipher.getInstance("DESede/CTR/NoPadding'
      - 'Cipher.getInstance("DESede/CTR/PKCS5Padding'
      - 'Cipher.getInstance("DESede/CTS/ISO10126Padding'
      - 'Cipher.getInstance("DESede/CTS/NoPadding'
      - 'Cipher.getInstance("DESede/CTS/PKCS5Padding'
      - 'Cipher.getInstance("DESede/ECB/ISO10126Padding'
      - 'Cipher.getInstance("DESede/ECB/NoPadding'
      - 'Cipher.getInstance("DESede/ECB/PKCS5Padding'
      - 'Cipher.getInstance("DESede/OFB/ISO10126Padding'
      - 'Cipher.getInstance("DESede/OFB/NoPadding'
      - 'Cipher.getInstance("DESede/OFB/PKCS5Padding'
      - 'Cipher.getInstance("RSA'
      - 'Cipher.getInstance("RSA/ECB/NoPadding'
      - 'Cipher.getInstance("RSA/ECB/OAEPPadding'
      - 'Cipher.getInstance("RSA/ECB/PKCS1Padding'
      - 'Cipher.getInstance("RSA/NONE/NoPadding'
      - 'Cipher.getInstance("RSA/NONE/OAEPPadding'
      - 'Cipher.getInstance("RSA/NONE/PKCS1Padding'
      - 'Cipher.getInstance("OAEPwithSHA-1andMGF1Padding'
      - 'Cipher.getInstance("OAEPwithSHA-256andMGF1Padding'
      - 'Cipher.getInstance("OAEPwithSHA-224andMGF1Padding'
      - 'Cipher.getInstance("OAEPwithSHA-384andMGF1Padding'
      - 'Cipher.getInstance("OAEPwithSHA-512andMGF1Padding'
    mac:
      - "Mac.getInstance("
      - 'Mac.getInstance("DESMAC'
      - 'Mac.getInstance("DESMAC/CFB8'
      - 'Mac.getInstance("DESedeMAC'
      - 'Mac.getInstance("DESedeMAC/CFB8'
      - 'Mac.getInstance("DESedeMAC64'
      - 'Mac.getInstance("DESwithISO9797'
      - 'Mac.getInstance("HmacMD5'
      - 'Mac.getInstance("HmacSHA1'
      - 'Mac.getInstance("HmacSHA224'
      - 'Mac.getInstance("HmacSHA256'
      - 'Mac.getInstance("HmacSHA384'
      - 'Mac.getInstance("HmacSHA512'
      - 'Mac.getInstance("ISO9797ALG3MAC'
      - 'Mac.getInstance("PBEwithHmacSHA'
      - 'Mac.getInstance("PBEwithHmacSHA1'
      - 'Mac.getInstance("PBEwithHmacSHA224'
      - 'Mac.getInstance("PBEwithHmacSHA256'
      - 'Mac.getInstance("PBEwithHmacSHA384'
      - 'Mac.getInstance("PBEwithHmacSHA512'
    NullCipher:
      - "NullCipher()"
    CipherInputStream:
      - "CipherInputStream("
    SecretKeyFactory:
      - "generateSecret("
      - "SecretKeyFactory.getInstance("
      - "getKeySpec("
      - "translateKey("
      - 'SecretKeyFactory.getInstance("AES'
      - 'SecretKeyFactory.getInstance("DES'
      - 'SecretKeyFactory.getInstance("DESede'
      - 'SecretKeyFactory.getInstance("HmacSHA1'
      - 'SecretKeyFactory.getInstance("HmacSHA224'
      - 'SecretKeyFactory.getInstance("HmacSHA256'
      - 'SecretKeyFactory.getInstance("HmacSHA384'
      - 'SecretKeyFactory.getInstance("HmacSHA512'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA1'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA1AndAES_128'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA1AndAES_256'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA224AndAES_128'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA224AndAES_256'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA256AndAES_128'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA256AndAES_256'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA384AndAES_128'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA384AndAES_256'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA512AndAES_128'
      - 'SecretKeyFactory.getInstance("PBEwithHmacSHA512AndAES_256'
      - 'SecretKeyFactory.getInstance("PBEwithMD5AND128BITAES-CBC-OPENSSL'
      - 'SecretKeyFactory.getInstance("PBEwithMD5AND192BITAES-CBC-OPENSSL'
      - 'SecretKeyFactory.getInstance("PBEwithMD5AND256BITAES-CBC-OPENSSL'
      - 'SecretKeyFactory.getInstance("PBEwithMD5ANDDES'
      - 'SecretKeyFactory.getInstance("PBEwithMD5ANDRC2'
      - 'SecretKeyFactory.getInstance("PBEwithSHA1ANDDES'
      - 'SecretKeyFactory.getInstance("PBEwithSHA1ANDRC2'
      - 'SecretKeyFactory.getInstance("PBEwithSHA256AND128BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHA256AND192BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHA256AND256BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND128BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND128BITRC2-CBC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND128BITRC4'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND192BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND2-KEYTRIPLEDES-CBC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND256BITAES-CBC-BC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND3-KEYTRIPLEDES-CBC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND40BITRC2-CBC'
      - 'SecretKeyFactory.getInstance("PBEwithSHAAND40BITRC4'
      - 'SecretKeyFactory.getInstance("PBEwithSHAANDTWOFISH-CBC'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA1'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA1And8BIT'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA224'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA256'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA384'
      - 'SecretKeyFactory.getInstance("PBKDF2withHmacSHA512'
    SealedObject:
      - "SealedObject("
    CipherOutputStream:
      - "CipherOutputStream("
